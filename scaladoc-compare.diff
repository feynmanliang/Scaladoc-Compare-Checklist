1.4.2/index/index-a.html.raw:
19a20,22
>       AssociationRules
>       fpm 
>     
46a50,52
>       antecedent
>       Rule 
>     
61a68,73
>       argmax
>       DenseVector SparseVector Vector 
>     
>       arrayLengthGt
>       ParamValidators 
>     
73a86,88
>       avgMetrics
>       CrossValidatorModel 
>     
\ No newline at end of file



1.4.2/index/index-b.html.raw:
33c33
<       CrossValidatorModel 
---
>       CrossValidatorModel TrainValidationSplitModel 



1.4.2/index/index-c.html.raw:
34a35,37
>       CountVectorizerModel
>       feature 
>     
46a50,52
>       caseSensitive
>       StopWordsRemover 
>     
75c81
<       KMeansModel StreamingKMeansModel 
---
>       KMeansModel KMeansModel StreamingKMeansModel 
81c87
<       mllib 
---
>       ml mllib 
124a131,133
>       confidence
>       Rule 
>     
130a140,142
>       consequent
>       Rule 
>     
135c147
<       Estimator Model Pipeline PipelineModel PipelineStage Predictor Transformer UnaryTransformer DecisionTreeClassificationModel DecisionTreeClassifier GBTClassificationModel GBTClassifier LogisticRegression LogisticRegressionModel OneVsRest OneVsRestModel RandomForestClassificationModel RandomForestClassifier BinaryClassificationEvaluator Evaluator RegressionEvaluator Binarizer Bucketizer HashingTF IDF IDFModel OneHotEncoder PolynomialExpansion RegexTokenizer StandardScaler StandardScalerModel StringIndexer StringIndexerModel Tokenizer VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ParamMap Params ALS ALSModel DecisionTreeRegressionModel DecisionTreeRegressor GBTRegressionModel GBTRegressor LinearRegression LinearRegressionModel RandomForestRegressionModel RandomForestRegressor CrossValidator CrossValidatorModel DenseMatrix DenseVector Matrix SparseMatrix SparseVector Vector ExponentialGenerator GammaGenerator LogNormalGenerator PoissonGenerator RandomDataGenerator StandardNormalGenerator UniformGenerator Strategy 
---
>       Estimator Model Pipeline PipelineModel PipelineStage Predictor Transformer UnaryTransformer DecisionTreeClassificationModel DecisionTreeClassifier GBTClassificationModel GBTClassifier LogisticRegression LogisticRegressionModel MultilayerPerceptronClassifier MultilayerPerceptronClassifierModel NaiveBayes NaiveBayesModel OneVsRest OneVsRestModel RandomForestClassificationModel RandomForestClassifier KMeans KMeansModel BinaryClassificationEvaluator Evaluator MulticlassClassificationEvaluator RegressionEvaluator Binarizer Bucketizer CountVectorizerModel HashingTF IDF IDFModel MinMaxScaler MinMaxScalerModel OneHotEncoder PCA PCAModel PolynomialExpansion RFormula RFormulaModel RegexTokenizer StandardScaler StandardScalerModel StopWordsRemover StringIndexer StringIndexerInverse StringIndexerModel Tokenizer VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ParamMap Params ALS ALSModel DecisionTreeRegressionModel DecisionTreeRegressor GBTRegressionModel GBTRegressor IsotonicRegression IsotonicRegressionModel LinearRegression LinearRegressionModel RandomForestRegressionModel RandomForestRegressor CrossValidator CrossValidatorModel TrainValidationSplit TrainValidationSplitModel DenseMatrix DenseVector Matrix SparseMatrix SparseVector Vector ExponentialGenerator GammaGenerator LogNormalGenerator PoissonGenerator RandomDataGenerator StandardNormalGenerator UniformGenerator Strategy 
150c162
<       UnaryTransformer ElementwiseProduct Normalizer PolynomialExpansion RegexTokenizer Tokenizer 
---
>       UnaryTransformer CountVectorizerModel DCT ElementwiseProduct NGram Normalizer PolynomialExpansion RegexTokenizer Tokenizer 



1.4.2/index/index-d.html.raw:
1a2,4
>       DCT
>       feature 
>     
63c66
<       ChiSqTestResult TestResult 
---
>       ChiSqTestResult KolmogorovSmirnovTestResult TestResult 
85a89,91
>       docConcentration
>       DistributedLDAModel LDAModel LocalLDAModel 
>     



1.4.2/index/index-e.html.raw:
33c33
<       BinaryClassificationEvaluator Evaluator RegressionEvaluator 
---
>       BinaryClassificationEvaluator Evaluator MulticlassClassificationEvaluator RegressionEvaluator 
48c48
<       RegressionMetrics 
---
>       LinearRegressionSummary RegressionMetrics 



1.4.2/index/index-f.html.raw:
16a17,19
>       FreqSequence
>       PrefixSpan 
>     
31a35,37
>       featureImportances
>       RandomForestClassificationModel RandomForestRegressionModel 
>     
40a47,49
>       featuresCol
>       LinearRegressionTrainingSummary 
>     
42c51
<       PredictionModel 
---
>       PredictionModel IsotonicRegressionModel 
51c60
<       Word2VecModel 
---
>       Word2VecModel Word2VecModel 
54c63
<       Estimator Pipeline Predictor OneVsRest IDF StandardScaler StringIndexer VectorIndexer Word2Vec ALS CrossValidator ChiSqSelector IDF PCA StandardScaler Word2Vec 
---
>       Estimator Pipeline Predictor OneVsRest KMeans IDF MinMaxScaler PCA RFormula StandardScaler StringIndexer VectorIndexer Word2Vec ALS CrossValidator TrainValidationSplit ChiSqSelector IDF PCA StandardScaler Word2Vec 
57c66,69
<       LogisticRegressionModel NaiveBayesModel SVMModel GaussianMixtureModel KMeansModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Saveable 
---
>       LogisticRegressionModel NaiveBayesModel SVMModel DistributedLDAModel GaussianMixtureModel KMeansModel LocalLDAModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Saveable 
>     
>       formula
>       RFormula 
63c75
<       FreqItemset 
---
>       FreqItemset FreqSequence 
67a80,82
>       freqSequences
>       PrefixSpanModel 
>     



1.4.2/index/index-g.html.raw:
55a56,58
>       gammaShape
>       DistributedLDAModel LDAModel LocalLDAModel 
>     
64a68,70
>       generateAssociationRules
>       FPGrowthModel 
>     
94a101,103
>       getCaseSensitive
>       StopWordsRemover 
>     
115a125,127
>       getFormula
>       RFormula 
>     
130a143,145
>       getInverse
>       DCT 
>     
136a152,154
>       getLabels
>       StringIndexerInverse 
>     
157a176,178
>       getMaxLocalProjDBSize
>       PrefixSpan 
>     
160a182,184
>       getMaxPatternLength
>       PrefixSpan 
>     
162c186
<       BinaryClassificationEvaluator RegressionEvaluator 
---
>       BinaryClassificationEvaluator MulticlassClassificationEvaluator RegressionEvaluator 
169a194,199
>       getMinSupport
>       PrefixSpan 
>     
>       getMinTermFreq
>       CountVectorizerModel 
>     
178a209,211
>       getN
>       NGram 
>     
193a227,229
>       getOptimzeAlpha
>       OnlineLDAOptimizer 
>     
226a263,265
>       getStopWords
>       StopWordsRemover 
>     
234c273
<       Binarizer LogisticRegressionModel SVMModel 
---
>       LogisticRegression LogisticRegressionModel Binarizer LogisticRegressionModel SVMModel 
252c291
<       Word2VecModel 
---
>       Word2VecModel Word2VecModel 



1.4.2/index/index-h.html.raw:
22a23,25
>       hasSummary
>       LinearRegressionModel 
>     



1.4.2/index/index-i.html.raw:
19a20,22
>       IntArrayParam
>       param 
>     
27c30
<       regression 
---
>       regression regression 
30c33
<       regression 
---
>       regression regression 
64a68,73
>       inverse
>       DCT 
>     
>       invert
>       StringIndexerModel 
>     



1.4.2/index/index-j.html.raw:
13a14,16
>       javaSequence
>       FreqSequence 
>     



1.4.2/index/index-k.html.raw:
3c3
<       clustering 
---
>       clustering clustering 
9c9
<       clustering 
---
>       clustering clustering 
16a17,19
>       KolmogorovSmirnovTestResult
>       test 
>     
22a26,28
>       kolmogorovSmirnovTest
>       Statistics 
>     
\ No newline at end of file



1.4.2/index/index-l.html.raw:
16a17,19
>       LDAUtils
>       clustering 
>     
40a44,49
>       LinearRegressionSummary
>       regression 
>     
>       LinearRegressionTrainingSummary
>       regression 
>     
85a95,97
>       labelCol
>       LinearRegressionSummary 
>     
87c99
<       NaiveBayesModel MulticlassMetrics MultilabelMetrics 
---
>       StringIndexerInverse NaiveBayesModel MulticlassMetrics MultilabelMetrics 
114c126
<       LogisticRegressionModel NaiveBayesModel SVMModel GaussianMixtureModel KMeansModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Loader 
---
>       LogisticRegressionModel NaiveBayesModel SVMModel DistributedLDAModel GaussianMixtureModel KMeansModel LocalLDAModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Loader 
129c141
<       DistributedLDAModel 
---
>       DistributedLDAModel LocalLDAModel 
142a155,157
>       logPerplexity
>       LocalLDAModel 
>     



1.4.2/index/index-m.html.raw:
25a26,31
>       MinMaxScaler
>       feature 
>     
>       MinMaxScalerModel
>       feature 
>     
28a35,37
>       MulticlassClassificationEvaluator
>       evaluation 
>     
34a44,49
>       MultilayerPerceptronClassifier
>       classification 
>     
>       MultilayerPerceptronClassifierModel
>       classification 
>     
60c75
<       StandardScalerModel ExponentialGenerator LogNormalGenerator PoissonGenerator MultivariateOnlineSummarizer MultivariateStatisticalSummary 
---
>       StandardScalerModel StandardScalerModel ExponentialGenerator LogNormalGenerator PoissonGenerator MultivariateOnlineSummarizer MultivariateStatisticalSummary 
63c78
<       RegressionMetrics 
---
>       LinearRegressionSummary RegressionMetrics 
69c84
<       RegressionMetrics 
---
>       LinearRegressionSummary RegressionMetrics 
78c93
<       BinaryClassificationEvaluator RegressionEvaluator 
---
>       BinaryClassificationEvaluator MulticlassClassificationEvaluator RegressionEvaluator 
100a116,118
>       minTermFreq
>       CountVectorizerModel 
>     



1.4.2/index/index-n.html.raw:
1a2,4
>       NGram
>       feature 
>     
3c6
<       classification 
---
>       classification classification 
6c9
<       classification 
---
>       classification classification 
25a29,31
>       n
>       NGram 
>     
57c63
<       ChiSqTestResult TestResult 
---
>       ChiSqTestResult KolmogorovSmirnovTestResult TestResult 
60c66
<       DenseVector SparseVector Vector 
---
>       DenseMatrix DenseVector Matrix SparseMatrix SparseVector Vector 
69c75
<       ClassificationModel LogisticRegressionModel LogisticRegressionModel Strategy 
---
>       ClassificationModel DecisionTreeClassificationModel LogisticRegressionModel NaiveBayesModel RandomForestClassificationModel LogisticRegressionModel Strategy 
78c84
<       HashingTF VectorIndexerModel LogisticRegressionModel HashingTF GeneralizedLinearAlgorithm 
---
>       RandomForestClassificationModel HashingTF VectorIndexerModel RandomForestRegressionModel LogisticRegressionModel HashingTF GeneralizedLinearAlgorithm 
87c93
<       DenseVector SparseVector Vector MultivariateOnlineSummarizer MultivariateStatisticalSummary 
---
>       DenseMatrix DenseVector Matrix SparseMatrix SparseVector Vector MultivariateOnlineSummarizer MultivariateStatisticalSummary 



1.4.2/index/index-o.html.raw:
16a17,19
>       objectiveHistory
>       LinearRegressionTrainingSummary 
>     
34a38,43
>       originalMax
>       MinMaxScalerModel 
>     
>       originalMin
>       MinMaxScalerModel 
>     
36c45
<       UnaryTransformer ElementwiseProduct Normalizer PolynomialExpansion RegexTokenizer Tokenizer 
---
>       UnaryTransformer CountVectorizerModel DCT ElementwiseProduct NGram Normalizer PolynomialExpansion RegexTokenizer Tokenizer 



1.4.2/index/index-p.html.raw:
3c3
<       feature 
---
>       feature feature 
6c6
<       feature 
---
>       feature feature 
58a59,64
>       PrefixSpan
>       fpm 
>     
>       PrefixSpanModel
>       fpm 
>     
63c69
<       ChiSqTestResult TestResult 
---
>       ChiSqTestResult KolmogorovSmirnovTestResult TestResult 
90c96
<       NaiveBayesModel 
---
>       NaiveBayesModel NaiveBayesModel 
120c126
<       PredictionModel ClassificationModel DecisionTreeClassificationModel GBTClassificationModel LogisticRegressionModel RandomForestClassificationModel DecisionTreeRegressionModel GBTRegressionModel LinearRegressionModel RandomForestRegressionModel ClassificationModel NaiveBayesModel GaussianMixtureModel KMeansModel MatrixFactorizationModel GeneralizedLinearModel IsotonicRegressionModel RegressionModel DecisionTreeModel Node Predict 
---
>       PredictionModel ClassificationModel DecisionTreeClassificationModel GBTClassificationModel LogisticRegressionModel MultilayerPerceptronClassifierModel DecisionTreeRegressionModel GBTRegressionModel IsotonicRegressionModel LinearRegressionModel RandomForestRegressionModel ClassificationModel NaiveBayesModel GaussianMixtureModel KMeansModel MatrixFactorizationModel GeneralizedLinearModel IsotonicRegressionModel RegressionModel DecisionTreeModel Node Predict 
130a137,139
>       predictProbabilities
>       NaiveBayesModel 
>     
132c141
<       ClassificationModel LogisticRegressionModel 
---
>       ClassificationModel DecisionTreeClassificationModel LogisticRegressionModel NaiveBayesModel RandomForestClassificationModel 
139a149,151
>       predictionCol
>       LinearRegressionSummary 
>     
141c153
<       IsotonicRegressionModel 
---
>       LinearRegressionSummary IsotonicRegressionModel 



1.4.2/index/index-q.html.raw:
1a2,7
>       Q
>       QRDecomposition 
>     
>       QRDecomposition
>       linalg 
>     



1.4.2/index/index-r.html.raw:
1a2,4
>       R
>       QRDecomposition 
>     
7a11,16
>       RFormula
>       feature 
>     
>       RFormulaModel
>       feature 
>     
61a71,73
>       Rule
>       AssociationRules 
>     
63c75
<       RegressionMetrics 
---
>       LinearRegressionSummary RegressionMetrics 
90c102
<       LogisticRegressionModel 
---
>       DecisionTreeClassificationModel LogisticRegressionModel NaiveBayesModel RandomForestClassificationModel 
121a134,136
>       residuals
>       LinearRegressionSummary 
>     
141c156
<       RegressionMetrics 
---
>       LinearRegressionSummary RegressionMetrics 
156c171
<       NaiveBayes GaussianMixture KMeans LDA PowerIterationClustering FPGrowth ALS GeneralizedLinearAlgorithm IsotonicRegression DecisionTree GradientBoostedTrees 
---
>       NaiveBayes GaussianMixture KMeans LDA PowerIterationClustering AssociationRules FPGrowth PrefixSpan ALS GeneralizedLinearAlgorithm IsotonicRegression DecisionTree GradientBoostedTrees 



1.4.2/index/index-s.html.raw:
52a53,55
>       StopWordsRemover
>       feature 
>     
76a80,82
>       StringIndexerInverse
>       feature 
>     
84c90
<       LogisticRegressionModel NaiveBayesModel SVMModel GaussianMixtureModel KMeansModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Saveable 
---
>       LogisticRegressionModel NaiveBayesModel SVMModel DistributedLDAModel GaussianMixtureModel KMeansModel LocalLDAModel PowerIterationClusteringModel Word2VecModel MatrixFactorizationModel IsotonicRegressionModel LassoModel LinearRegressionModel RidgeRegressionModel DecisionTreeModel GradientBoostedTreesModel RandomForestModel Saveable 
103a110,112
>       sequence
>       FreqSequence 
>     
124a134,136
>       setCaseSensitive
>       StopWordsRemover 
>     
135c147
<       GaussianMixture LBFGS 
---
>       GaussianMixture GradientDescent LBFGS StreamingLinearRegressionWithSGD 
156c168
<       KMeans 
---
>       KMeans KMeans 
159c171
<       CrossValidator 
---
>       CrossValidator TrainValidationSplit 
162c174
<       CrossValidator 
---
>       CrossValidator TrainValidationSplit 
165c177
<       CrossValidator 
---
>       CrossValidator TrainValidationSplit 
171c183
<       PredictionModel Predictor 
---
>       PredictionModel Predictor OneVsRest KMeans 
177c189,192
<       LogisticRegression 
---
>       LogisticRegression LinearRegression 
>     
>       setFormula
>       RFormula 
193a209,214
>       setInitMode
>       KMeans 
>     
>       setInitSteps
>       KMeans 
>     
198c219
<       GaussianMixture 
---
>       GaussianMixture KMeans 
210c231
<       UnaryTransformer Binarizer Bucketizer HashingTF IDF IDFModel OneHotEncoder StandardScaler StandardScalerModel StringIndexer StringIndexerModel VectorIndexer VectorIndexerModel Word2Vec Word2VecModel 
---
>       UnaryTransformer Binarizer Bucketizer HashingTF IDF IDFModel MinMaxScaler MinMaxScalerModel OneHotEncoder PCA PCAModel StandardScaler StandardScalerModel StopWordsRemover StringIndexer StringIndexerInverse StringIndexerModel VectorIndexer VectorIndexerModel Word2Vec Word2VecModel 
220a242,244
>       setInverse
>       DCT 
>     
223a248,250
>       setIsotonicParam
>       IsotonicRegression 
>     
231c258
<       GaussianMixture KMeans LDA PowerIterationClustering StreamingKMeans 
---
>       KMeans PCA GaussianMixture KMeans LDA PowerIterationClustering StreamingKMeans 
237c264,267
<       Predictor BinaryClassificationEvaluator RegressionEvaluator 
---
>       Predictor OneVsRest BinaryClassificationEvaluator MulticlassClassificationEvaluator RegressionEvaluator 
>     
>       setLabels
>       StringIndexerInverse 
250a281,283
>       setMax
>       MinMaxScaler MinMaxScalerModel 
>     
261c294
<       GBTClassifier LogisticRegression Word2Vec ALS GBTRegressor LinearRegression 
---
>       GBTClassifier LogisticRegression KMeans Word2Vec ALS GBTRegressor LinearRegression 
265a299,301
>       setMaxLocalProjDBSize
>       PrefixSpan 
>     
271a308,310
>       setMaxPatternLength
>       PrefixSpan 
>     
273c312,318
<       BinaryClassificationEvaluator RegressionEvaluator 
---
>       BinaryClassificationEvaluator MulticlassClassificationEvaluator RegressionEvaluator 
>     
>       setMin
>       MinMaxScaler MinMaxScalerModel 
>     
>       setMinConfidence
>       AssociationRules 
288c333,336
<       FPGrowth 
---
>       FPGrowth PrefixSpan 
>     
>       setMinTermFreq
>       CountVectorizerModel 
297c345,348
<       NaiveBayes 
---
>       NaiveBayes NaiveBayes 
>     
>       setN
>       NGram 
334a386,388
>       setOptimzeAlpha
>       OnlineLDAOptimizer 
>     
336c390
<       UnaryTransformer Binarizer Bucketizer HashingTF IDF IDFModel OneHotEncoder StandardScaler StandardScalerModel StringIndexer StringIndexerModel VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel 
---
>       UnaryTransformer Binarizer Bucketizer HashingTF IDF IDFModel MinMaxScaler MinMaxScalerModel OneHotEncoder PCA PCAModel StandardScaler StandardScalerModel StopWordsRemover StringIndexer StringIndexerInverse StringIndexerModel VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel 
348c402
<       PredictionModel Predictor RegressionEvaluator ALS ALSModel 
---
>       PredictionModel Predictor OneVsRest KMeans MulticlassClassificationEvaluator RegressionEvaluator ALS ALSModel 
366c420
<       ClassificationModel Classifier 
---
>       ClassificationModel Classifier BinaryClassificationEvaluator 
372c426
<       KMeans 
---
>       KMeans KMeans 
384c438,441
<       GBTClassifier RandomForestClassifier Word2Vec ALS GBTRegressor RandomForestRegressor GaussianMixture KMeans LDA Word2Vec ExponentialGenerator GammaGenerator LogNormalGenerator PoissonGenerator StandardNormalGenerator UniformGenerator ALS 
---
>       GBTClassifier RandomForestClassifier KMeans Word2Vec ALS GBTRegressor RandomForestRegressor GaussianMixture KMeans LDA Word2Vec ExponentialGenerator GammaGenerator LogNormalGenerator PoissonGenerator StandardNormalGenerator UniformGenerator ALS 
>     
>       setSmoothing
>       NaiveBayes 
391a449,451
>       setStandardization
>       LogisticRegression LinearRegression 
>     
394a455,457
>       setStopWords
>       StopWordsRemover 
>     
409a473,475
>       setTrainRatio
>       TrainValidationSplit 
>     
433a500,502
>       setWeightParam
>       IsotonicRegression 
>     
489c558
<       ChiSqTestResult TestResult 
---
>       ChiSqTestResult KolmogorovSmirnovTestResult TestResult 
495c564,567
<       NumericAttribute StandardScalerModel LogNormalGenerator 
---
>       NumericAttribute StandardScalerModel StandardScalerModel LogNormalGenerator 
>     
>       stopWords
>       StopWordsRemover 
502a575,577
>       summary
>       LinearRegressionModel 
>     



1.4.2/index/index-t.html.raw:
7a8,13
>       TrainValidationSplit
>       tuning 
>     
>       TrainValidationSplitModel
>       tuning 
>     
10a17,19
>       tallSkinnyQR
>       RowMatrix 
>     
15c24
<       NaiveBayesModel 
---
>       NaiveBayesModel NaiveBayesModel 
66c75
<       Attribute DecisionTreeClassificationModel GBTClassificationModel RandomForestClassificationModel Param ParamMap DecisionTreeRegressionModel GBTRegressionModel RandomForestRegressionModel InternalNode LeafNode LogisticRegressionModel SVMModel DenseVector Matrix SparseVector GeneralizedLinearModel LabeledPoint ChiSqTestResult TestResult DecisionTreeModel InformationGainStats Node Predict Split 
---
>       Attribute DecisionTreeClassificationModel GBTClassificationModel NaiveBayesModel RandomForestClassificationModel RFormula RFormulaModel Param ParamMap DecisionTreeRegressionModel GBTRegressionModel RandomForestRegressionModel InternalNode LeafNode LogisticRegressionModel SVMModel DenseVector Matrix SparseVector GeneralizedLinearModel LabeledPoint ChiSqTestResult KolmogorovSmirnovTestResult TestResult DecisionTreeModel InformationGainStats Node Predict Split 
73a83,85
>       topDocumentsPerTopic
>       DistributedLDAModel 
>     
77c89
<       topicDistributions
---
>       topTopicsPerDocument
79a92,100
>       topicConcentration
>       DistributedLDAModel LDAModel LocalLDAModel 
>     
>       topicDistributions
>       DistributedLDAModel LocalLDAModel 
>     
>       topics
>       LocalLDAModel 
>     
82a104,106
>       totalIterations
>       LinearRegressionTrainingSummary 
>     
84c108
<       Predictor DecisionTreeClassifier GBTClassifier LogisticRegression RandomForestClassifier ALS DecisionTreeRegressor GBTRegressor LinearRegression RandomForestRegressor LogisticRegressionWithSGD NaiveBayes SVMWithSGD KMeans ALS LassoWithSGD LinearRegressionWithSGD RidgeRegressionWithSGD DecisionTree GradientBoostedTrees 
---
>       Predictor DecisionTreeClassifier GBTClassifier LogisticRegression MultilayerPerceptronClassifier NaiveBayes RandomForestClassifier ALS DecisionTreeRegressor GBTRegressor IsotonicRegression LinearRegression RandomForestRegressor LogisticRegressionWithSGD NaiveBayes SVMWithSGD KMeans ALS LassoWithSGD LinearRegressionWithSGD RidgeRegressionWithSGD DecisionTree GradientBoostedTrees 
99c123,126
<       PipelineModel PredictionModel Transformer UnaryTransformer ClassificationModel OneVsRestModel Binarizer Bucketizer HashingTF IDFModel OneHotEncoder StandardScalerModel StringIndexerModel VectorAssembler VectorIndexerModel Word2VecModel ALSModel CrossValidatorModel ChiSqSelectorModel ElementwiseProduct HashingTF IDFModel Normalizer PCAModel StandardScalerModel VectorTransformer Word2VecModel 
---
>       PipelineModel PredictionModel Transformer UnaryTransformer ClassificationModel OneVsRestModel KMeansModel Binarizer Bucketizer HashingTF IDFModel MinMaxScalerModel OneHotEncoder PCAModel RFormulaModel StandardScalerModel StopWordsRemover StringIndexerInverse StringIndexerModel VectorAssembler VectorIndexerModel Word2VecModel ALSModel CrossValidatorModel TrainValidationSplitModel ChiSqSelectorModel ElementwiseProduct HashingTF IDFModel Normalizer PCAModel StandardScalerModel VectorTransformer Word2VecModel 
>     
>       transformImpl
>       PredictionModel GBTClassificationModel RandomForestClassificationModel GBTRegressionModel RandomForestRegressionModel 
102c129
<       Pipeline PipelineModel PipelineStage PredictionModel Predictor UnaryTransformer OneVsRest OneVsRestModel Binarizer Bucketizer HashingTF IDF IDFModel OneHotEncoder StandardScaler StandardScalerModel StringIndexer StringIndexerModel VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ALS ALSModel CrossValidator CrossValidatorModel 
---
>       Pipeline PipelineModel PipelineStage PredictionModel Predictor UnaryTransformer OneVsRest OneVsRestModel KMeans KMeansModel Binarizer Bucketizer HashingTF IDF IDFModel MinMaxScaler MinMaxScalerModel OneHotEncoder PCA PCAModel RFormula RFormulaModel StandardScaler StandardScalerModel StopWordsRemover StringIndexer StringIndexerInverse StringIndexerModel VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ALS ALSModel CrossValidator CrossValidatorModel TrainValidationSplit TrainValidationSplitModel 



1.4.2/index/index-u.html.raw:
21c21
<       Pipeline PipelineModel DecisionTreeClassificationModel DecisionTreeClassifier GBTClassificationModel GBTClassifier LogisticRegression LogisticRegressionModel OneVsRest OneVsRestModel RandomForestClassificationModel RandomForestClassifier BinaryClassificationEvaluator RegressionEvaluator Binarizer Bucketizer ElementwiseProduct HashingTF IDF IDFModel Normalizer OneHotEncoder PolynomialExpansion RegexTokenizer StandardScaler StandardScalerModel StringIndexer StringIndexerModel Tokenizer VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ALS ALSModel DecisionTreeRegressionModel DecisionTreeRegressor GBTRegressionModel GBTRegressor LinearRegression LinearRegressionModel RandomForestRegressionModel RandomForestRegressor CrossValidator CrossValidatorModel 
---
>       Pipeline PipelineModel DecisionTreeClassificationModel DecisionTreeClassifier GBTClassificationModel GBTClassifier LogisticRegression LogisticRegressionModel MultilayerPerceptronClassifier MultilayerPerceptronClassifierModel NaiveBayes NaiveBayesModel OneVsRest OneVsRestModel RandomForestClassificationModel RandomForestClassifier KMeans KMeansModel BinaryClassificationEvaluator MulticlassClassificationEvaluator RegressionEvaluator Binarizer Bucketizer CountVectorizerModel DCT ElementwiseProduct HashingTF IDF IDFModel MinMaxScaler MinMaxScalerModel NGram Normalizer OneHotEncoder PCA PCAModel PolynomialExpansion RFormula RFormulaModel RegexTokenizer StandardScaler StandardScalerModel StopWordsRemover StringIndexer StringIndexerInverse StringIndexerModel Tokenizer VectorAssembler VectorIndexer VectorIndexerModel Word2Vec Word2VecModel ALS ALSModel DecisionTreeRegressionModel DecisionTreeRegressor GBTRegressionModel GBTRegressor IsotonicRegression IsotonicRegressionModel LinearRegression LinearRegressionModel RandomForestRegressionModel RandomForestRegressor CrossValidator CrossValidatorModel TrainValidationSplit TrainValidationSplitModel 



1.4.2/index/index-v.html.raw:
33c33
<       UnaryTransformer RegexTokenizer Tokenizer 
---
>       UnaryTransformer CountVectorizerModel DCT NGram RegexTokenizer Tokenizer 
36c36,39
<       Pipeline PipelineModel Params CrossValidator CrossValidatorModel 
---
>       Pipeline PipelineModel Params CrossValidator CrossValidatorModel TrainValidationSplit TrainValidationSplitModel 
>     
>       validationMetrics
>       TrainValidationSplitModel 
61a65,67
>       vocabulary
>       CountVectorizerModel 
>     
\ No newline at end of file



1.4.2/index/index-w.html.raw:
9c9
<       BooleanParam DoubleArrayParam DoubleParam FloatParam IntParam LongParam Param StringArrayParam 
---
>       BooleanParam DoubleArrayParam DoubleParam FloatParam IntArrayParam IntParam LongParam Param StringArrayParam 



1.4.2/index.html.raw:
35c35,39
<             (class)ClassificationModel(class)Classifier(class)DecisionTreeClassificationModel(object)(class)DecisionTreeClassifier(class)GBTClassificationModel(object)(class)GBTClassifier(class)LogisticRegression(class)LogisticRegressionModel(class)OneVsRest(class)OneVsRestModel(class)RandomForestClassificationModel(object)(class)RandomForestClassifier
---
>             (class)ClassificationModel(class)Classifier(class)DecisionTreeClassificationModel(object)(class)DecisionTreeClassifier(class)GBTClassificationModel(object)(class)GBTClassifier(class)LogisticRegression(class)LogisticRegressionModel(class)MultilayerPerceptronClassifier(class)MultilayerPerceptronClassifierModel(class)NaiveBayes(class)NaiveBayesModel(class)OneVsRest(class)OneVsRestModel(class)RandomForestClassificationModel(object)(class)RandomForestClassifier
>              
>           
>             org.apache.spark.ml.clustering
>             (class)KMeans(class)KMeansModel
39c43
<             (class)BinaryClassificationEvaluator(class)Evaluator(class)RegressionEvaluator
---
>             (class)BinaryClassificationEvaluator(class)Evaluator(class)MulticlassClassificationEvaluator(class)RegressionEvaluator
43c47
<             (class)Binarizer(class)Bucketizer(class)ElementwiseProduct(class)HashingTF(class)IDF(class)IDFModel(class)Normalizer(class)OneHotEncoder(class)PolynomialExpansion(class)RegexTokenizer(class)StandardScaler(class)StandardScalerModel(class)StringIndexer(class)StringIndexerModel(class)Tokenizer(class)VectorAssembler(class)VectorIndexer(class)VectorIndexerModel(class)Word2Vec(class)Word2VecModel
---
>             (class)Binarizer(class)Bucketizer(class)CountVectorizerModel(class)DCT(class)ElementwiseProduct(class)HashingTF(class)IDF(class)IDFModel(class)MinMaxScaler(class)MinMaxScalerModel(class)NGram(class)Normalizer(class)OneHotEncoder(class)PCA(class)PCAModel(class)PolynomialExpansion(class)RegexTokenizer(class)RFormula(class)RFormulaModel(class)StandardScaler(class)StandardScalerModel(class)StopWordsRemover(class)StringIndexer(class)StringIndexerInverse(class)StringIndexerModel(class)Tokenizer(class)VectorAssembler(class)VectorIndexer(class)VectorIndexerModel(class)Word2Vec(class)Word2VecModel
47c51
<             (class)BooleanParam(class)DoubleArrayParam(class)DoubleParam(class)FloatParam(class)IntParam(class)JavaParams(class)LongParam(class)Param(object)(class)ParamMap(case class)ParamPair(trait)Params(object)ParamValidators(class)StringArrayParam
---
>             (class)BooleanParam(class)DoubleArrayParam(class)DoubleParam(class)FloatParam(class)IntArrayParam(class)IntParam(class)JavaParams(class)LongParam(class)Param(object)(class)ParamMap(case class)ParamPair(trait)Params(object)ParamValidators(class)StringArrayParam
55c59
<             (class)DecisionTreeRegressionModel(object)(class)DecisionTreeRegressor(class)GBTRegressionModel(object)(class)GBTRegressor(class)LinearRegression(class)LinearRegressionModel(class)RandomForestRegressionModel(object)(class)RandomForestRegressor(class)RegressionModel
---
>             (class)DecisionTreeRegressionModel(object)(class)DecisionTreeRegressor(class)GBTRegressionModel(object)(class)GBTRegressor(class)IsotonicRegression(class)IsotonicRegressionModel(class)LinearRegression(class)LinearRegressionModel(class)LinearRegressionSummary(class)LinearRegressionTrainingSummary(class)RandomForestRegressionModel(object)(class)RandomForestRegressor(class)RegressionModel
63c67
<             (class)CrossValidator(class)CrossValidatorModel(class)ParamGridBuilder
---
>             (class)CrossValidator(class)CrossValidatorModel(class)ParamGridBuilder(class)TrainValidationSplit(class)TrainValidationSplitModel
75c79
<             (class)DistributedLDAModel(class)EMLDAOptimizer(class)GaussianMixture(object)(class)GaussianMixtureModel(object)(class)KMeans(object)(class)KMeansModel(class)LDA(class)LDAModel(trait)LDAOptimizer(class)LocalLDAModel(class)OnlineLDAOptimizer(object)(class)PowerIterationClustering(object)(class)PowerIterationClusteringModel(class)StreamingKMeans(class)StreamingKMeansModel
---
>             (object)(class)DistributedLDAModel(class)EMLDAOptimizer(class)GaussianMixture(object)(class)GaussianMixtureModel(object)(class)KMeans(object)(class)KMeansModel(class)LDA(class)LDAModel(trait)LDAOptimizer(object)LDAUtils(object)(class)LocalLDAModel(class)OnlineLDAOptimizer(object)(class)PowerIterationClustering(object)(class)PowerIterationClusteringModel(class)StreamingKMeans(class)StreamingKMeansModel
87c91
<             (object)(class)FPGrowth(class)FPGrowthModel
---
>             (object)(class)AssociationRules(object)(class)FPGrowth(class)FPGrowthModel(object)(class)PrefixSpan(class)PrefixSpanModel
91c95
<             (object)(class)DenseMatrix(object)(class)DenseVector(object)Matrices(trait)Matrix(case class)SingularValueDecomposition(object)(class)SparseMatrix(object)(class)SparseVector(trait)Vector(object)Vectors
---
>             (object)(class)DenseMatrix(object)(class)DenseVector(object)Matrices(trait)Matrix(case class)QRDecomposition(case class)SingularValueDecomposition(object)(class)SparseMatrix(object)(class)SparseVector(trait)Vector(object)Vectors
130c134
<             (class)ChiSqTestResult(trait)TestResult
---
>             (class)ChiSqTestResult(class)KolmogorovSmirnovTestResult(trait)TestResult



1.4.2/org/apache/spark/ml/classification/ClassificationModel.html.raw:
29c29
<           LogisticRegressionModel
---
>           DecisionTreeClassificationModel, LogisticRegressionModel, NaiveBayesModel, RandomForestClassificationModel
1019c1019,1021
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1023,1026c1025
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1177a1177,1189
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/classification/Classifier.html.raw:
29c29
<           LogisticRegression
---
>           DecisionTreeClassifier, LogisticRegression, NaiveBayes, RandomForestClassifier
1012c1012,1014
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1016,1019c1018
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/classification/DecisionTreeClassificationModel.html.raw:
14c14
<         DecisionTreeClassificationModel extends PredictionModel[Vector, DecisionTreeClassificationModel] with DecisionTreeModel with Serializable
---
>         DecisionTreeClassificationModel extends ProbabilisticClassificationModel[Vector, DecisionTreeClassificationModel] with DecisionTreeModel with Serializable
27c27
<           DecisionTreeModel, PredictionModel[Vector, DecisionTreeClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[DecisionTreeClassificationModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           DecisionTreeModel, ProbabilisticClassificationModel[Vector, DecisionTreeClassificationModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, ClassificationModel[Vector, DecisionTreeClassificationModel], ClassifierParams, HasRawPredictionCol, PredictionModel[Vector, DecisionTreeClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[DecisionTreeClassificationModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
45c45
<                   DecisionTreeClassificationModelDecisionTreeModelPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   DecisionTreeClassificationModelDecisionTreeModelProbabilisticClassificationModelProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassificationModelClassifierParamsHasRawPredictionColPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
63a64,80
>               Instance Constructors
>               
>       
>       
>       
>       
>         
>         new
>       
>       
>         DecisionTreeClassificationModel(rootNode: Node, numClasses: Int)
>       
>       
>       Construct a decision tree classification model.Construct a decision tree classification model.rootNodeRoot node of tree, with other nodes attached.
> 
>     
>             
506a524,562
>         getProbabilityCol: String
>       
>       
>        Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getRawPredictionCol: String
>       
>       
>        Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
816a873,885
>         val
>       
>       
>         numClasses: Int
>       
>       
>       Number of classes (values which the label can take).Number of classes (values which the label can take). Definition ClassesDecisionTreeClassificationModel → ClassificationModel
>     
>       
>       
>       
>       
>         
868,869c937,975
< This internal method is used to implement transform() and output predictionCol.
<  Attributesprotected Definition ClassesDecisionTreeClassificationModel → PredictionModel
---
> This internal method is used to implement transform() and output predictionCol.This default implementation for classification predicts the index of the maximum value
> from predictRaw().
>  Attributesprotected Definition ClassesDecisionTreeClassificationModel → ClassificationModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictProbability(features: Vector): Vector
>       
>       
>       Predict the probability of each class given the features.Predict the probability of each class given the features.
> These predictions are also called class conditional probabilities.This internal method is used to implement transform() and output probabilityCol.
> returnsEstimated class conditional probabilities
>  Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictRaw(features: Vector): Vector
>       
>       
>       Raw prediction for each possible label.Raw prediction for each possible label.
> The meaning of a "raw" prediction may vary between algorithms, but it intuitively gives
> a measure of confidence in each possible label (where larger = more confident).
> This internal method is used to implement transform() and output rawPredictionCol.
> returnsvector where element i is the raw prediction for label i.
>          This raw prediction may be any real number, where a larger value indicates greater
>          confidence for that label.
>  Attributesprotected Definition ClassesDecisionTreeClassificationModel → ClassificationModel
888a995,1081
>         def
>       
>       
>         probability2prediction(probability: Vector): Double
>       
>       
>       Given a vector of class conditional probabilities, select the predicted label.Given a vector of class conditional probabilities, select the predicted label.
> This supports thresholds which favor particular labels.returnspredicted label
>  Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         probabilityCol: Param[String]
>       
>       
>       Param for Column name for predicted class conditional probabilities.Param for Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.. Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2prediction(rawPrediction: Vector): Double
>       
>       
>       Given a vector of raw predictions, select the predicted label.Given a vector of raw predictions, select the predicted label.
> This may be overridden to support thresholds which favor particular labels.returnspredicted label
>  Attributesprotected Definition ClassesProbabilisticClassificationModel → ClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2probability(rawPrediction: Vector): Vector
>       
>       
>       Non-in-place version of raw2probabilityInPlace()Non-in-place version of raw2probabilityInPlace() Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2probabilityInPlace(rawPrediction: Vector): Vector
>       
>       
>       Estimate the probability of each class given the raw prediction,
> doing the computation in-place.Estimate the probability of each class given the raw prediction,
> doing the computation in-place.
> These predictions are also called class conditional probabilities.This internal method is used to implement transform() and output probabilityCol.
> returnsEstimated class conditional probabilities (modified input vector)
>  Attributesprotected Definition ClassesDecisionTreeClassificationModel → ProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         rawPredictionCol: Param[String]
>       
>       
>       Param for raw prediction (a.Param for raw prediction (a.k.a. confidence) column name. Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         
950c1143,1145
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
954,957c1149
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1017a1210,1248
>         
>         def
>       
>       
>         setProbabilityCol(value: String): DecisionTreeClassificationModel
>       
>       
>        Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setRawPredictionCol(value: String): DecisionTreeClassificationModel
>       
>       
>        Definition ClassesClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setThresholds(value: Array[Double]): DecisionTreeClassificationModel
>       
>       
>        Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
1030a1262,1274
>         final 
>         val
>       
>       
>         thresholds: DoubleArrayParam
>       
>       
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
>     
>       
>       
>       
>       
1064,1068c1308,1312
<       Transforms dataset by reading from featuresCol, calling predict(), and storing
< the predictions as a new column predictionCol.Transforms dataset by reading from featuresCol, calling predict(), and storing
< the predictions as a new column predictionCol.
< datasetinput datasetreturnstransformed dataset with predictionCol of type Double
<  Definition ClassesPredictionModel → Transformer
---
>       Transforms dataset by reading from featuresCol, and appending new columns as specified by
> parameters:Transforms dataset by reading from featuresCol, and appending new columns as specified by
> parameters:predicted labels as predictionCol of type Doubleraw predictions (confidences) as rawPredictionCol of type Vectorprobability of each class as probabilityCol of type Vector.
> datasetinput datasetreturnstransformed dataset
>  Definition ClassesProbabilisticClassificationModel → ClassificationModel → PredictionModel → Transformer
1108a1353,1365
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1160c1417
<  Attributesprotected Definition ClassesPredictorParams
---
>  Attributesprotected Definition ClassesProbabilisticClassifierParams → ClassifierParams → PredictorParams
1247a1505,1518
>               Inherited from ProbabilisticClassificationModel[Vector, DecisionTreeClassificationModel]
>             
>               Inherited from ProbabilisticClassifierParams
>             
>               Inherited from HasThresholds
>             
>               Inherited from HasProbabilityCol
>             
>               Inherited from ClassificationModel[Vector, DecisionTreeClassificationModel]
>             
>               Inherited from ClassifierParams
>             
>               Inherited from HasRawPredictionCol
>             



1.4.2/org/apache/spark/ml/classification/DecisionTreeClassifier.html.raw:
14c14
<         DecisionTreeClassifier extends Predictor[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel] with DecisionTreeParams with TreeClassifierParams
---
>         DecisionTreeClassifier extends ProbabilisticClassifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel] with DecisionTreeParams with TreeClassifierParams
28c28
<           TreeClassifierParams, DecisionTreeParams, Predictor[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[DecisionTreeClassificationModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           TreeClassifierParams, DecisionTreeParams, ProbabilisticClassifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, Classifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel], ClassifierParams, HasRawPredictionCol, Predictor[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[DecisionTreeClassificationModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
46c46
<                   DecisionTreeClassifierTreeClassifierParamsDecisionTreeParamsPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   DecisionTreeClassifierTreeClassifierParamsDecisionTreeParamsProbabilisticClassifierProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassifierClassifierParamsHasRawPredictionColPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
727a728,766
>         getProbabilityCol: String
>       
>       
>        Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getRawPredictionCol: String
>       
>       
>        Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
1145a1185,1210
>         val
>       
>       
>         probabilityCol: Param[String]
>       
>       
>       Param for Column name for predicted class conditional probabilities.Param for Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.. Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         rawPredictionCol: Param[String]
>       
>       
>       Param for raw prediction (a.Param for raw prediction (a.k.a. confidence) column name. Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
1220c1285,1287
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1224,1227c1291
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1364a1429,1467
>         
>         def
>       
>       
>         setProbabilityCol(value: String): DecisionTreeClassifier
>       
>       
>        Definition ClassesProbabilisticClassifier
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setRawPredictionCol(value: String): DecisionTreeClassifier
>       
>       
>        Definition ClassesClassifier
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setThresholds(value: Array[Double]): DecisionTreeClassifier
>       
>       
>        Definition ClassesProbabilisticClassifier
>     
>       
>       
>       
>       
1377a1481,1493
>         final 
>         val
>       
>       
>         thresholds: DoubleArrayParam
>       
>       
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
>     
>       
>       
>       
>       
1463c1579
<  Attributesprotected Definition ClassesPredictorParams
---
>  Attributesprotected Definition ClassesProbabilisticClassifierParams → ClassifierParams → PredictorParams
1552a1669,1682
>               Inherited from ProbabilisticClassifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel]
>             
>               Inherited from ProbabilisticClassifierParams
>             
>               Inherited from HasThresholds
>             
>               Inherited from HasProbabilityCol
>             
>               Inherited from Classifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel]
>             
>               Inherited from ClassifierParams
>             
>               Inherited from HasRawPredictionCol
>             



1.4.2/org/apache/spark/ml/classification/GBTClassificationModel.html.raw:
939c939,941
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
943,946c945
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1110a1110,1122
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesGBTClassificationModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/classification/GBTClassifier.html.raw:
1326c1326,1328
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1330,1333c1332
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/classification/LogisticRegression.html.raw:
26c26
<           LogisticRegressionParams, HasThreshold, HasTol, HasFitIntercept, HasMaxIter, HasElasticNetParam, HasRegParam, ProbabilisticClassifier[Vector, LogisticRegression, LogisticRegressionModel], ProbabilisticClassifierParams, HasProbabilityCol, Classifier[Vector, LogisticRegression, LogisticRegressionModel], ClassifierParams, HasRawPredictionCol, Predictor[Vector, LogisticRegression, LogisticRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[LogisticRegressionModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           LogisticRegressionParams, HasStandardization, HasTol, HasFitIntercept, HasMaxIter, HasElasticNetParam, HasRegParam, ProbabilisticClassifier[Vector, LogisticRegression, LogisticRegressionModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, Classifier[Vector, LogisticRegression, LogisticRegressionModel], ClassifierParams, HasRawPredictionCol, Predictor[Vector, LogisticRegression, LogisticRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[LogisticRegressionModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
44c44
<                   LogisticRegressionLogisticRegressionParamsHasThresholdHasTolHasFitInterceptHasMaxIterHasElasticNetParamHasRegParamProbabilisticClassifierProbabilisticClassifierParamsHasProbabilityColClassifierClassifierParamsHasRawPredictionColPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   LogisticRegressionLogisticRegressionParamsHasStandardizationHasTolHasFitInterceptHasMaxIterHasElasticNetParamHasRegParamProbabilisticClassifierProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassifierClassifierParamsHasRawPredictionColPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
691a692,704
>         getStandardization: Boolean
>       
>       
>        Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         
>         def
>       
>       
695c708,726
<        Definition ClassesHasThreshold
---
>       Version of getThresholds() for binary classification, available for backwards
> compatibility.Version of getThresholds() for binary classification, available for backwards
> compatibility.Param thresholds must have length 2 (or not be specified).
> This returns <span class="num">1</span> / (<span class="num">1</span> + thresholds(<span class="num">0</span>) / thresholds(<span class="num">1</span>)).
> 1 / (1 + thresholds(0) / thresholds(1))
> }}} Definition ClassesLogisticRegression → LogisticRegressionParams
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
1144c1175,1177
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1148,1151c1181
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1298a1329,1346
>         setStandardization(value: Boolean): LogisticRegression.this.type
>       
>       
>       Whether to standardize the training features before fitting the model.Whether to standardize the training features before fitting the model.
> The coefficients of models will be always returned on the original scale,
> so it will be transparent for users. Note that with/without standardization,
> the models should be always converged to the same solution when no regularization
> is applied. In R's GLMNET package, the default behavior is true as well.
> Default is true.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1301a1350,1363
>       Version of setThresholds() for binary classification, available for backwards
> compatibility.Version of setThresholds() for binary classification, available for backwards
> compatibility.Calling this with threshold p will effectively call setThresholds(Array(1-p, p)).Default is effectively 0.5. Definition ClassesLogisticRegression → LogisticRegressionParams
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setThresholds(value: Array[Double]): LogisticRegression
>       
1302a1365
>        Definition ClassesProbabilisticClassifier
1323a1387,1399
>         val
>       
>       
>         standardization: BooleanParam
>       
>       
>       Param for whether to standardize the training features before fitting the model.Param for whether to standardize the training features before fitting the model.. Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         final 
1340c1416
<         threshold: DoubleParam
---
>         thresholds: DoubleArrayParam
1343c1419
<       Param for threshold in binary classification prediction, in range [0, 1].Param for threshold in binary classification prediction, in range [0, 1]. Definition ClassesHasThreshold
---
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
1535c1611
<               Inherited from HasThreshold
---
>               Inherited from HasStandardization
1550a1627,1628
>               Inherited from HasThresholds
>             



1.4.2/org/apache/spark/ml/classification/LogisticRegressionModel.html.raw:
25c25
<           LogisticRegressionParams, HasThreshold, HasTol, HasFitIntercept, HasMaxIter, HasElasticNetParam, HasRegParam, ProbabilisticClassificationModel[Vector, LogisticRegressionModel], ProbabilisticClassifierParams, HasProbabilityCol, ClassificationModel[Vector, LogisticRegressionModel], ClassifierParams, HasRawPredictionCol, PredictionModel[Vector, LogisticRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[LogisticRegressionModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           LogisticRegressionParams, HasStandardization, HasTol, HasFitIntercept, HasMaxIter, HasElasticNetParam, HasRegParam, ProbabilisticClassificationModel[Vector, LogisticRegressionModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, ClassificationModel[Vector, LogisticRegressionModel], ClassifierParams, HasRawPredictionCol, PredictionModel[Vector, LogisticRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[LogisticRegressionModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
43c43
<                   LogisticRegressionModelLogisticRegressionParamsHasThresholdHasTolHasFitInterceptHasMaxIterHasElasticNetParamHasRegParamProbabilisticClassificationModelProbabilisticClassifierParamsHasProbabilityColClassificationModelClassifierParamsHasRawPredictionColPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   LogisticRegressionModelLogisticRegressionParamsHasStandardizationHasTolHasFitInterceptHasMaxIterHasElasticNetParamHasRegParamProbabilisticClassificationModelProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassificationModelClassifierParamsHasRawPredictionColPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
593a594,606
>         getStandardization: Boolean
>       
>       
>        Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         
>         def
>       
>       
597c610,628
<        Definition ClassesHasThreshold
---
>       Version of getThresholds() for binary classification, available for backwards
> compatibility.Version of getThresholds() for binary classification, available for backwards
> compatibility.Param thresholds must have length 2 (or not be specified).
> This returns <span class="num">1</span> / (<span class="num">1</span> + thresholds(<span class="num">0</span>) / thresholds(<span class="num">1</span>)).
> 1 / (1 + thresholds(0) / thresholds(1))
> }}} Definition ClassesLogisticRegressionModel → LogisticRegressionParams
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
1007c1038
< The behavior of this can be adjusted using threshold.
---
> The behavior of this can be adjusted using thresholds.
1071c1102
< This may be overridden to support thresholds which favor particular labels.returnspredicted label
---
> This supports thresholds which favor particular labels.returnspredicted label
1100c1131
<  Attributesprotected Definition ClassesLogisticRegressionModel → ClassificationModel
---
>  Attributesprotected Definition ClassesLogisticRegressionModel → ProbabilisticClassificationModel → ClassificationModel
1212c1243,1245
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1216,1219c1249
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1312a1343,1345
>       Version of setThresholds() for binary classification, available for backwards
> compatibility.Version of setThresholds() for binary classification, available for backwards
> compatibility.Calling this with threshold p will effectively call setThresholds(Array(1-p, p)).Default is effectively 0.5. Definition ClassesLogisticRegressionModel → LogisticRegressionParams
1318a1352,1376
>         def
>       
>       
>         setThresholds(value: Array[Double]): LogisticRegressionModel
>       
>       
>        Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         standardization: BooleanParam
>       
>       
>       Param for whether to standardize the training features before fitting the model.Param for whether to standardize the training features before fitting the model.. Definition ClassesHasStandardization
>     
>       
>       
>       
>       
1336c1394
<         threshold: DoubleParam
---
>         thresholds: DoubleArrayParam
1339c1397
<       Param for threshold in binary classification prediction, in range [0, 1].Param for threshold in binary classification prediction, in range [0, 1]. Definition ClassesHasThreshold
---
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
1422a1481,1493
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1575c1646
<               Inherited from HasThreshold
---
>               Inherited from HasStandardization
1590a1662,1663
>               Inherited from HasThresholds
>             



1.4.2/org/apache/spark/ml/classification/OneVsRest.html.raw:
220c220,222
<       param for the base binary classifier that we reduce multiclass classification into.param for the base binary classifier that we reduce multiclass classification into. Definition ClassesOneVsRestParams
---
>       param for the base binary classifier that we reduce multiclass classification into.param for the base binary classifier that we reduce multiclass classification into.
> The base classifier input and output columns are ignored in favor of
> the ones specified in OneVsRest. Definition ClassesOneVsRestParams
1003c1005,1007
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1007,1010c1011
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1030a1032,1070
>         
>         def
>       
>       
>         setFeaturesCol(value: String): OneVsRest.this.type
>       
>       
>       
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setLabelCol(value: String): OneVsRest.this.type
>       
>       
>       
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setPredictionCol(value: String): OneVsRest.this.type
>       
>       
>       
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/ml/classification/OneVsRestModel.html.raw:
191c191,193
<       param for the base binary classifier that we reduce multiclass classification into.param for the base binary classifier that we reduce multiclass classification into. Definition ClassesOneVsRestParams
---
>       param for the base binary classifier that we reduce multiclass classification into.param for the base binary classifier that we reduce multiclass classification into.
> The base classifier input and output columns are ignored in favor of
> the ones specified in OneVsRest. Definition ClassesOneVsRestParams
938c940,942
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
942,945c946
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/classification/package.html.raw:
72c72
<         DecisionTreeClassificationModel extends PredictionModel[Vector, DecisionTreeClassificationModel] with DecisionTreeModel with Serializable
---
>         DecisionTreeClassificationModel extends ProbabilisticClassificationModel[Vector, DecisionTreeClassificationModel] with DecisionTreeModel with Serializable
86c86
<         DecisionTreeClassifier extends Predictor[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel] with DecisionTreeParams with TreeClassifierParams
---
>         DecisionTreeClassifier extends ProbabilisticClassifier[Vector, DecisionTreeClassifier, DecisionTreeClassificationModel] with DecisionTreeParams with TreeClassifierParams
154a155,209
>         
>         class
>       
>       
>         MultilayerPerceptronClassifier extends Predictor[Vector, MultilayerPerceptronClassifier, MultilayerPerceptronClassifierModel] with MultilayerPerceptronParams
>       
>       
>       :: Experimental ::
> Classifier trainer based on the Multilayer Perceptron.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         MultilayerPerceptronClassifierModel extends PredictionModel[Vector, MultilayerPerceptronClassifierModel] with Serializable
>       
>       
>       :: Experimental ::
> Classifier model based on the Multilayer Perceptron.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         NaiveBayes extends ProbabilisticClassifier[Vector, NaiveBayes, NaiveBayesModel] with NaiveBayesParams
>       
>       
>       Naive Bayes Classifiers.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         NaiveBayesModel extends ProbabilisticClassificationModel[Vector, NaiveBayesModel] with NaiveBayesParams
>       
>       
>       Model produced by NaiveBayes
> 
>     
>       
>       
>       
>       
186c241
<         RandomForestClassificationModel extends PredictionModel[Vector, RandomForestClassificationModel] with TreeEnsembleModel with Serializable
---
>         RandomForestClassificationModel extends ProbabilisticClassificationModel[Vector, RandomForestClassificationModel] with TreeEnsembleModel with Serializable
200c255
<         RandomForestClassifier extends Predictor[Vector, RandomForestClassifier, RandomForestClassificationModel] with RandomForestParams with TreeClassifierParams
---
>         RandomForestClassifier extends ProbabilisticClassifier[Vector, RandomForestClassifier, RandomForestClassificationModel] with RandomForestParams with TreeClassifierParams



1.4.2/org/apache/spark/ml/classification/RandomForestClassificationModel.html.raw:
14c14
<         RandomForestClassificationModel extends PredictionModel[Vector, RandomForestClassificationModel] with TreeEnsembleModel with Serializable
---
>         RandomForestClassificationModel extends ProbabilisticClassificationModel[Vector, RandomForestClassificationModel] with TreeEnsembleModel with Serializable
26c26
<           TreeEnsembleModel, PredictionModel[Vector, RandomForestClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[RandomForestClassificationModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           TreeEnsembleModel, ProbabilisticClassificationModel[Vector, RandomForestClassificationModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, ClassificationModel[Vector, RandomForestClassificationModel], ClassifierParams, HasRawPredictionCol, PredictionModel[Vector, RandomForestClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[RandomForestClassificationModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
44c44
<                   RandomForestClassificationModelTreeEnsembleModelPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   RandomForestClassificationModelTreeEnsembleModelProbabilisticClassificationModelProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassificationModelClassifierParamsHasRawPredictionColPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
62a63,79
>               Instance Constructors
>               
>       
>       
>       
>       
>         
>         new
>       
>       
>         RandomForestClassificationModel(trees: Array[DecisionTreeClassificationModel], numFeatures: Int, numClasses: Int)
>       
>       
>       Construct a random forest classification model, with all trees weighted equally.Construct a random forest classification model, with all trees weighted equally.treesComponent trees
> 
>     
>             
331a349,366
>         
>         lazy val
>       
>       
>         featureImportances: Vector
>       
>       
>       Estimate of the importance of each feature.Estimate of the importance of each feature.This generalizes the idea of "Gini" importance to other losses,
> following the explanation of Gini importance from "Random Forests" documentation
> by Leo Breiman and Adele Cutler, and following the implementation from scikit-learn.This feature importance is calculated as follows:Average over trees:importance(feature j) = sum (over nodes which split on feature j) of the gain,
>       where gain is scaled by the number of instances passing through nodeNormalize importances for tree based on total number of training instances used
>       to build tree.Normalize feature importance vector to sum to 1.
> 
>     
>       
>       
>       
>       
490a526,564
>         getProbabilityCol: String
>       
>       
>        Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getRawPredictionCol: String
>       
>       
>        Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
803a878,904
>         numClasses: Int
>       
>       
>       Number of classes (values which the label can take).Number of classes (values which the label can take). Definition ClassesRandomForestClassificationModel → ClassificationModel
>     
>       
>       
>       
>       
>         
>         val
>       
>       
>         numFeatures: Int
>       
>       
>       Number of features used by this model
> 
>     
>       
>       
>       
>       
>         
>         val
>       
>       
852,853c953,991
< This internal method is used to implement transform() and output predictionCol.
<  Attributesprotected Definition ClassesRandomForestClassificationModel → PredictionModel
---
> This internal method is used to implement transform() and output predictionCol.This default implementation for classification predicts the index of the maximum value
> from predictRaw().
>  Attributesprotected Definition ClassesClassificationModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictProbability(features: Vector): Vector
>       
>       
>       Predict the probability of each class given the features.Predict the probability of each class given the features.
> These predictions are also called class conditional probabilities.This internal method is used to implement transform() and output probabilityCol.
> returnsEstimated class conditional probabilities
>  Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictRaw(features: Vector): Vector
>       
>       
>       Raw prediction for each possible label.Raw prediction for each possible label.
> The meaning of a "raw" prediction may vary between algorithms, but it intuitively gives
> a measure of confidence in each possible label (where larger = more confident).
> This internal method is used to implement transform() and output rawPredictionCol.
> returnsvector where element i is the raw prediction for label i.
>          This raw prediction may be any real number, where a larger value indicates greater
>          confidence for that label.
>  Attributesprotected Definition ClassesRandomForestClassificationModel → ClassificationModel
871a1010,1096
>         
>         def
>       
>       
>         probability2prediction(probability: Vector): Double
>       
>       
>       Given a vector of class conditional probabilities, select the predicted label.Given a vector of class conditional probabilities, select the predicted label.
> This supports thresholds which favor particular labels.returnspredicted label
>  Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         probabilityCol: Param[String]
>       
>       
>       Param for Column name for predicted class conditional probabilities.Param for Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.. Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2prediction(rawPrediction: Vector): Double
>       
>       
>       Given a vector of raw predictions, select the predicted label.Given a vector of raw predictions, select the predicted label.
> This may be overridden to support thresholds which favor particular labels.returnspredicted label
>  Attributesprotected Definition ClassesProbabilisticClassificationModel → ClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2probability(rawPrediction: Vector): Vector
>       
>       
>       Non-in-place version of raw2probabilityInPlace()Non-in-place version of raw2probabilityInPlace() Attributesprotected Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         raw2probabilityInPlace(rawPrediction: Vector): Vector
>       
>       
>       Estimate the probability of each class given the raw prediction,
> doing the computation in-place.Estimate the probability of each class given the raw prediction,
> doing the computation in-place.
> These predictions are also called class conditional probabilities.This internal method is used to implement transform() and output probabilityCol.
> returnsEstimated class conditional probabilities (modified input vector)
>  Attributesprotected Definition ClassesRandomForestClassificationModel → ProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         rawPredictionCol: Param[String]
>       
>       
>       Param for raw prediction (a.Param for raw prediction (a.k.a. confidence) column name. Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
921c1146,1148
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
925,928c1152
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
988a1213,1251
>         
>         def
>       
>       
>         setProbabilityCol(value: String): RandomForestClassificationModel
>       
>       
>        Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setRawPredictionCol(value: String): RandomForestClassificationModel
>       
>       
>        Definition ClassesClassificationModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setThresholds(value: Array[Double]): RandomForestClassificationModel
>       
>       
>        Definition ClassesProbabilisticClassificationModel
>     
>       
>       
>       
>       
1001a1265,1277
>         final 
>         val
>       
>       
>         thresholds: DoubleArrayParam
>       
>       
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
>     
>       
>       
>       
>       
1048,1052c1324,1328
<       Transforms dataset by reading from featuresCol, calling predict(), and storing
< the predictions as a new column predictionCol.Transforms dataset by reading from featuresCol, calling predict(), and storing
< the predictions as a new column predictionCol.
< datasetinput datasetreturnstransformed dataset with predictionCol of type Double
<  Definition ClassesPredictionModel → Transformer
---
>       Transforms dataset by reading from featuresCol, and appending new columns as specified by
> parameters:Transforms dataset by reading from featuresCol, and appending new columns as specified by
> parameters:predicted labels as predictionCol of type Doubleraw predictions (confidences) as rawPredictionCol of type Vectorprobability of each class as probabilityCol of type Vector.
> datasetinput datasetreturnstransformed dataset
>  Definition ClassesProbabilisticClassificationModel → ClassificationModel → PredictionModel → Transformer
1092a1369,1381
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesRandomForestClassificationModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1170c1459
<  Attributesprotected Definition ClassesPredictorParams
---
>  Attributesprotected Definition ClassesProbabilisticClassifierParams → ClassifierParams → PredictorParams
1257a1547,1560
>               Inherited from ProbabilisticClassificationModel[Vector, RandomForestClassificationModel]
>             
>               Inherited from ProbabilisticClassifierParams
>             
>               Inherited from HasThresholds
>             
>               Inherited from HasProbabilityCol
>             
>               Inherited from ClassificationModel[Vector, RandomForestClassificationModel]
>             
>               Inherited from ClassifierParams
>             
>               Inherited from HasRawPredictionCol
>             



1.4.2/org/apache/spark/ml/classification/RandomForestClassifier.html.raw:
14c14
<         RandomForestClassifier extends Predictor[Vector, RandomForestClassifier, RandomForestClassificationModel] with RandomForestParams with TreeClassifierParams
---
>         RandomForestClassifier extends ProbabilisticClassifier[Vector, RandomForestClassifier, RandomForestClassificationModel] with RandomForestParams with TreeClassifierParams
28c28
<           TreeClassifierParams, RandomForestParams, TreeEnsembleParams, HasSeed, DecisionTreeParams, Predictor[Vector, RandomForestClassifier, RandomForestClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[RandomForestClassificationModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           TreeClassifierParams, RandomForestParams, TreeEnsembleParams, HasSeed, DecisionTreeParams, ProbabilisticClassifier[Vector, RandomForestClassifier, RandomForestClassificationModel], ProbabilisticClassifierParams, HasThresholds, HasProbabilityCol, Classifier[Vector, RandomForestClassifier, RandomForestClassificationModel], ClassifierParams, HasRawPredictionCol, Predictor[Vector, RandomForestClassifier, RandomForestClassificationModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[RandomForestClassificationModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
46c46
<                   RandomForestClassifierTreeClassifierParamsRandomForestParamsTreeEnsembleParamsHasSeedDecisionTreeParamsPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   RandomForestClassifierTreeClassifierParamsRandomForestParamsTreeEnsembleParamsHasSeedDecisionTreeParamsProbabilisticClassifierProbabilisticClassifierParamsHasThresholdsHasProbabilityColClassifierClassifierParamsHasRawPredictionColPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
774a775,800
>         getProbabilityCol: String
>       
>       
>        Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
>         getRawPredictionCol: String
>       
>       
>        Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
800a827,839
>         getThresholds: Array[Double]
>       
>       
>        Definition ClassesHasThresholds
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
1237a1277,1302
>         probabilityCol: Param[String]
>       
>       
>       Param for Column name for predicted class conditional probabilities.Param for Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities.. Definition ClassesHasProbabilityCol
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
>         rawPredictionCol: Param[String]
>       
>       
>       Param for raw prediction (a.Param for raw prediction (a.k.a. confidence) column name. Definition ClassesHasRawPredictionCol
>     
>       
>       
>       
>       
>         final 
>         val
>       
>       
1322c1387,1389
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1326,1329c1393
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1496a1561,1586
>         setProbabilityCol(value: String): RandomForestClassifier
>       
>       
>        Definition ClassesProbabilisticClassifier
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setRawPredictionCol(value: String): RandomForestClassifier
>       
>       
>        Definition ClassesClassifier
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1518a1609,1621
>         
>         def
>       
>       
>         setThresholds(value: Array[Double]): RandomForestClassifier
>       
>       
>        Definition ClassesProbabilisticClassifier
>     
>       
>       
>       
>       
1545a1649,1661
>         final 
>         val
>       
>       
>         thresholds: DoubleArrayParam
>       
>       
>       Param for Thresholds in multi-class classification to adjust the probability of predicting each class.Param for Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values >= 0. The class with largest value p/t is predicted, where p is the original probability of that class and t is the class' threshold.. Definition ClassesHasThresholds
>     
>       
>       
>       
>       
1631c1747
<  Attributesprotected Definition ClassesPredictorParams
---
>  Attributesprotected Definition ClassesProbabilisticClassifierParams → ClassifierParams → PredictorParams
1726a1843,1856
>               Inherited from ProbabilisticClassifier[Vector, RandomForestClassifier, RandomForestClassificationModel]
>             
>               Inherited from ProbabilisticClassifierParams
>             
>               Inherited from HasThresholds
>             
>               Inherited from HasProbabilityCol
>             
>               Inherited from Classifier[Vector, RandomForestClassifier, RandomForestClassificationModel]
>             
>               Inherited from ClassifierParams
>             
>               Inherited from HasRawPredictionCol
>             



1.4.2/org/apache/spark/ml/Estimator.html.raw:
28c28
<           ALS, Classifier, CrossValidator, DecisionTreeClassifier, DecisionTreeRegressor, GBTClassifier, GBTRegressor, IDF, LinearRegression, LogisticRegression, OneVsRest, Pipeline, Predictor, RandomForestClassifier, RandomForestRegressor, StandardScaler, StringIndexer, VectorIndexer, Word2Vec
---
>           ALS, Classifier, CrossValidator, DecisionTreeClassifier, DecisionTreeRegressor, GBTClassifier, GBTRegressor, IDF, IsotonicRegression, KMeans, LinearRegression, LogisticRegression, MinMaxScaler, MultilayerPerceptronClassifier, NaiveBayes, OneVsRest, PCA, Pipeline, Predictor, RFormula, RandomForestClassifier, RandomForestRegressor, StandardScaler, StringIndexer, TrainValidationSplit, VectorIndexer, Word2Vec
890c890,892
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
894,897c896
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/evaluation/BinaryClassificationEvaluator.html.raw:
19c19
< Evaluator for binary classification, which expects two input columns: score and label.
---
> Evaluator for binary classification, which expects two input columns: rawPrediction and label.
738c738,740
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
742,745c744
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
796c795
<         setScoreCol(value: String): BinaryClassificationEvaluator.this.type
---
>         setRawPredictionCol(value: String): BinaryClassificationEvaluator.this.type
920a920,938
>               Deprecated Value Members
>               
>       
>       
>       
>       
>         
>         def
>       
>       
>         setScoreCol(value: String): BinaryClassificationEvaluator.this.type
>       
>       
>        Annotations
>                 @deprecated
>               
>         Deprecated(Since version 1.5.0) use setRawPredictionCol instead
>     
>             



1.4.2/org/apache/spark/ml/evaluation/Evaluator.html.raw:
28c28
<           BinaryClassificationEvaluator, RegressionEvaluator
---
>           BinaryClassificationEvaluator, MulticlassClassificationEvaluator, RegressionEvaluator
667c667,669
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
671,674c673
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/evaluation/package.html.raw:
50c50
< Evaluator for binary classification, which expects two input columns: score and label.
---
> Evaluator for binary classification, which expects two input columns: rawPrediction and label.
69a70,83
>         
>         class
>       
>       
>         MulticlassClassificationEvaluator extends Evaluator with HasPredictionCol with HasLabelCol
>       
>       
>       :: Experimental ::
> Evaluator for multiclass classification, which expects two input columns: score and label.
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/ml/evaluation/RegressionEvaluator.html.raw:
740c740,742
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
744,747c746
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Binarizer.html.raw:
865c865,867
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
869,872c871
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Bucketizer.html.raw:
893c893,895
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
897,900c899
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/ElementwiseProduct.html.raw:
910c910,912
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
914,917c916
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/HashingTF.html.raw:
879c879,881
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
883,886c885
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/IDF.html.raw:
945c945,947
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
949,952c951
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/IDFModel.html.raw:
877c877,879
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
881,884c883
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Normalizer.html.raw:
909c909,911
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
913,916c915
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/OneHotEncoder.html.raw:
874c874,876
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
878,881c880
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/package.html.raw:
73a74,101
>         CountVectorizerModel extends UnaryTransformer[Seq[String], Vector, CountVectorizerModel]
>       
>       
>       :: Experimental ::
> Converts a text document to a sparse vector of token counts.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         DCT extends UnaryTransformer[Vector, Vector, DCT]
>       
>       
>       :: Experimental ::
> A feature transformer that takes the 1D discrete cosine transform of a real vector.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
129a158,200
>         MinMaxScaler extends Estimator[MinMaxScalerModel] with MinMaxScalerParams
>       
>       
>       :: Experimental ::
> Rescale each feature individually to a common range [min, max] linearly using column summary
> statistics, which is also known as min-max normalization or Rescaling.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         MinMaxScalerModel extends Model[MinMaxScalerModel] with MinMaxScalerParams
>       
>       
>       :: Experimental ::
> Model fitted by MinMaxScaler.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         NGram extends UnaryTransformer[Seq[String], Seq[String], NGram]
>       
>       
>       :: Experimental ::
> A feature transformer that converts the input array of strings into an array of n-grams.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
158a230,257
>         PCA extends Estimator[PCAModel] with PCAParams
>       
>       
>       :: Experimental ::
> PCA trains a model to project vectors to a low-dimensional space using PCA.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         PCAModel extends Model[PCAModel] with PCAParams
>       
>       
>       :: Experimental ::
> Model fitted by PCA.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
172a272,299
>         RFormula extends Estimator[RFormulaModel] with RFormulaBase
>       
>       
>       :: Experimental ::
> Implements the transforms required for fitting a dataset against an R model formula.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         RFormulaModel extends Model[RFormulaModel] with RFormulaBase
>       
>       
>       :: Experimental ::
> A fitted RFormula.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
216a344,357
>         StopWordsRemover extends Transformer with HasInputCol with HasOutputCol
>       
>       
>       :: Experimental ::
> A feature transformer that filters out stop words from input.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
230a372,386
>         StringIndexerInverse extends Transformer with HasInputCol with HasOutputCol
>       
>       
>       :: Experimental ::
> Transform a provided column back to the original input types using either the metadata
> on the input column, or if provided using the labels supplied by the user.
>     
>       
>       
>       
>       
>         
>         class
>       
>       



1.4.2/org/apache/spark/ml/feature/PolynomialExpansion.html.raw:
913c913,915
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
917,920c919
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/RegexTokenizer.html.raw:
966c966,968
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
970,973c972
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/StandardScaler.html.raw:
920c920,922
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
924,927c926
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/StandardScalerModel.html.raw:
718a719,731
>         
>         val
>       
>       
>         mean: Vector
>       
>       
>       Mean of the StandardScalerModel
>     
>       
>       
>       
>       
851c864,866
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
855,858c870
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
918a931,943
>         
>         val
>       
>       
>         std: Vector
>       
>       
>       Standard deviation of the StandardScalerModel
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/ml/feature/StringIndexer.html.raw:
922c922,924
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
926,929c928
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/StringIndexerModel.html.raw:
513a514,529
>         
>         def
>       
>       
>         invert(inputCol: String, outputCol: String): StringIndexerInverse
>       
>       
>       Return a model to perform the inverse transformation.Return a model to perform the inverse transformation.
> Note: By default we keep the original columns during this transformation, so the inverse
> should only be used on new columns such as predicted labels.
> 
>     
>       
>       
>       
>       
854c870,872
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
858,861c876
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Tokenizer.html.raw:
883c883,885
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
887,890c889
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/VectorAssembler.html.raw:
852c852,854
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
856,859c858
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/VectorIndexer.html.raw:
956c956,958
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
960,963c962
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/VectorIndexerModel.html.raw:
925c925,927
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
929,932c931
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Word2Vec.html.raw:
1052c1052,1054
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1056,1059c1058
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/feature/Word2VecModel.html.raw:
349a350,382
>         
>         def
>       
>       
>         findSynonyms(word: Vector, num: Int): DataFrame
>       
>       
>       Find "num" number of words closest to similarity to the given vector representation
> of the word.Find "num" number of words closest to similarity to the given vector representation
> of the word. Returns a dataframe with the words and the cosine similarities between the
> synonyms and the given word vector.
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         findSynonyms(word: String, num: Int): DataFrame
>       
>       
>       Find "num" number of words closest in similarity to the given word.Find "num" number of words closest in similarity to the given word.
> Returns a dataframe with the words and the cosine similarities between the
> synonyms and the given word.
> 
>     
>       
>       
>       
>       
522a556,569
>         
>         val
>       
>       
>         getVectors: DataFrame
>       
>       
>       Returns a dataframe with two fields, "word" and "vector", with "word" being a String and
> and the vector the DenseVector that it is mapped to.
>     
>       
>       
>       
>       
983c1030,1032
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
987,990c1036
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/Model.html.raw:
29c29
<           ALSModel, Bucketizer, ClassificationModel, CrossValidatorModel, DecisionTreeClassificationModel, DecisionTreeRegressionModel, GBTClassificationModel, GBTRegressionModel, IDFModel, LinearRegressionModel, LogisticRegressionModel, OneVsRestModel, PipelineModel, PredictionModel, RandomForestClassificationModel, RandomForestRegressionModel, RegressionModel, StandardScalerModel, StringIndexerModel, VectorIndexerModel, Word2VecModel
---
>           ALSModel, Bucketizer, ClassificationModel, CrossValidatorModel, DecisionTreeClassificationModel, DecisionTreeRegressionModel, GBTClassificationModel, GBTRegressionModel, IDFModel, IsotonicRegressionModel, KMeansModel, LinearRegressionModel, LogisticRegressionModel, MinMaxScalerModel, MultilayerPerceptronClassifierModel, NaiveBayesModel, OneVsRestModel, PCAModel, PipelineModel, PredictionModel, RFormulaModel, RandomForestClassificationModel, RandomForestRegressionModel, RegressionModel, StandardScalerModel, StringIndexerModel, TrainValidationSplitModel, VectorIndexerModel, Word2VecModel
867c867,869
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
871,874c873
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/package.html.raw:
230a231,243
>         clustering
>       
>       
>       
>     
>       
>       
>       
>       
>         
>         package
>       
>       



1.4.2/org/apache/spark/ml/param/JavaParams.html.raw:
638c638,640
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
642,645c644
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/param/package.html.raw:
101a102,115
>         IntArrayParam extends Param[Array[Int]]
>       
>       
>       :: DeveloperApi ::
> Specialized version of Param[Array[Int]] for Java.
>     
>       
>       
>       
>       
>         
>         class
>       
>       



1.4.2/org/apache/spark/ml/param/Param.html.raw:
30c30
<           BooleanParam, DoubleArrayParam, DoubleParam, FloatParam, IntParam, LongParam, StringArrayParam
---
>           BooleanParam, DoubleArrayParam, DoubleParam, FloatParam, IntArrayParam, IntParam, LongParam, StringArrayParam



1.4.2/org/apache/spark/ml/param/Params.html.raw:
29c29
<           ALS, ALSModel, Binarizer, BinaryClassificationEvaluator, Bucketizer, ClassificationModel, Classifier, CrossValidator, CrossValidatorModel, DecisionTreeClassificationModel, DecisionTreeClassifier, DecisionTreeRegressionModel, DecisionTreeRegressor, ElementwiseProduct, Estimator, Evaluator, GBTClassificationModel, GBTClassifier, GBTRegressionModel, GBTRegressor, HashingTF, IDF, IDFModel, JavaParams, LinearRegression, LinearRegressionModel, LogisticRegression, LogisticRegressionModel, Model, Normalizer, OneHotEncoder, OneVsRest, OneVsRestModel, Pipeline, PipelineModel, PipelineStage, PolynomialExpansion, PredictionModel, Predictor, RandomForestClassificationModel, RandomForestClassifier, RandomForestRegressionModel, RandomForestRegressor, RegexTokenizer, RegressionEvaluator, RegressionModel, StandardScaler, StandardScalerModel, StringIndexer, StringIndexerModel, Tokenizer, Transformer, UnaryTransformer, VectorAssembler, VectorIndexer, VectorIndexerModel, Word2Vec, Word2VecModel
---
>           ALS, ALSModel, Binarizer, BinaryClassificationEvaluator, Bucketizer, ClassificationModel, Classifier, CountVectorizerModel, CrossValidator, CrossValidatorModel, DCT, DecisionTreeClassificationModel, DecisionTreeClassifier, DecisionTreeRegressionModel, DecisionTreeRegressor, ElementwiseProduct, Estimator, Evaluator, GBTClassificationModel, GBTClassifier, GBTRegressionModel, GBTRegressor, HashingTF, IDF, IDFModel, IsotonicRegression, IsotonicRegressionModel, JavaParams, KMeans, KMeansModel, LinearRegression, LinearRegressionModel, LogisticRegression, LogisticRegressionModel, MinMaxScaler, MinMaxScalerModel, Model, MulticlassClassificationEvaluator, MultilayerPerceptronClassifier, MultilayerPerceptronClassifierModel, NGram, NaiveBayes, NaiveBayesModel, Normalizer, OneHotEncoder, OneVsRest, OneVsRestModel, PCA, PCAModel, Pipeline, PipelineModel, PipelineStage, PolynomialExpansion, PredictionModel, Predictor, RFormula, RFormulaModel, RandomForestClassificationModel, RandomForestClassifier, RandomForestRegressionModel, RandomForestRegressor, RegexTokenizer, RegressionEvaluator, RegressionModel, StandardScaler, StandardScalerModel, StopWordsRemover, StringIndexer, StringIndexerInverse, StringIndexerModel, Tokenizer, TrainValidationSplit, TrainValidationSplitModel, Transformer, UnaryTransformer, VectorAssembler, VectorIndexer, VectorIndexerModel, Word2Vec, Word2VecModel
619c619,621
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
623,626c625
<  Attributesprotected Annotations
<                 @varargs()
<               
<         
---
>  Attributesprotected 



1.4.2/org/apache/spark/ml/param/ParamValidators$.html.raw:
139a140,152
>         
>         def
>       
>       
>         arrayLengthGt[T](lowerBound: Double): (Array[T]) ⇒ Boolean
>       
>       
>       Check that the array length is greater than lowerBound.
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/ml/Pipeline.html.raw:
895c895,897
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
899,902c901
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/PipelineModel.html.raw:
799c799,801
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
803,806c805
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/PipelineStage.html.raw:
28c28
<           ALS, ALSModel, Binarizer, Bucketizer, ClassificationModel, Classifier, CrossValidator, CrossValidatorModel, DecisionTreeClassificationModel, DecisionTreeClassifier, DecisionTreeRegressionModel, DecisionTreeRegressor, ElementwiseProduct, Estimator, GBTClassificationModel, GBTClassifier, GBTRegressionModel, GBTRegressor, HashingTF, IDF, IDFModel, LinearRegression, LinearRegressionModel, LogisticRegression, LogisticRegressionModel, Model, Normalizer, OneHotEncoder, OneVsRest, OneVsRestModel, Pipeline, PipelineModel, PolynomialExpansion, PredictionModel, Predictor, RandomForestClassificationModel, RandomForestClassifier, RandomForestRegressionModel, RandomForestRegressor, RegexTokenizer, RegressionModel, StandardScaler, StandardScalerModel, StringIndexer, StringIndexerModel, Tokenizer, Transformer, UnaryTransformer, VectorAssembler, VectorIndexer, VectorIndexerModel, Word2Vec, Word2VecModel
---
>           ALS, ALSModel, Binarizer, Bucketizer, ClassificationModel, Classifier, CountVectorizerModel, CrossValidator, CrossValidatorModel, DCT, DecisionTreeClassificationModel, DecisionTreeClassifier, DecisionTreeRegressionModel, DecisionTreeRegressor, ElementwiseProduct, Estimator, GBTClassificationModel, GBTClassifier, GBTRegressionModel, GBTRegressor, HashingTF, IDF, IDFModel, IsotonicRegression, IsotonicRegressionModel, KMeans, KMeansModel, LinearRegression, LinearRegressionModel, LogisticRegression, LogisticRegressionModel, MinMaxScaler, MinMaxScalerModel, Model, MultilayerPerceptronClassifier, MultilayerPerceptronClassifierModel, NGram, NaiveBayes, NaiveBayesModel, Normalizer, OneHotEncoder, OneVsRest, OneVsRestModel, PCA, PCAModel, Pipeline, PipelineModel, PolynomialExpansion, PredictionModel, Predictor, RFormula, RFormulaModel, RandomForestClassificationModel, RandomForestClassifier, RandomForestRegressionModel, RandomForestRegressor, RegexTokenizer, RegressionModel, StandardScaler, StandardScalerModel, StopWordsRemover, StringIndexer, StringIndexerInverse, StringIndexerModel, Tokenizer, TrainValidationSplit, TrainValidationSplitModel, Transformer, UnaryTransformer, VectorAssembler, VectorIndexer, VectorIndexerModel, Word2Vec, Word2VecModel
824c824,826
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
828,831c830
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/PredictionModel.html.raw:
31c31
<           ClassificationModel, DecisionTreeClassificationModel, DecisionTreeRegressionModel, GBTClassificationModel, GBTRegressionModel, LinearRegressionModel, LogisticRegressionModel, RandomForestClassificationModel, RandomForestRegressionModel, RegressionModel
---
>           ClassificationModel, DecisionTreeClassificationModel, DecisionTreeRegressionModel, GBTClassificationModel, GBTRegressionModel, IsotonicRegressionModel, LinearRegressionModel, LogisticRegressionModel, MultilayerPerceptronClassifierModel, NaiveBayesModel, RandomForestClassificationModel, RandomForestRegressionModel, RegressionModel
946c946,948
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
950,953c952
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1091a1091,1103
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/Predictor.html.raw:
32c32
<           Classifier, DecisionTreeClassifier, DecisionTreeRegressor, GBTClassifier, GBTRegressor, LinearRegression, LogisticRegression, RandomForestClassifier, RandomForestRegressor
---
>           Classifier, DecisionTreeClassifier, DecisionTreeRegressor, GBTClassifier, GBTRegressor, IsotonicRegression, LinearRegression, LogisticRegression, MultilayerPerceptronClassifier, NaiveBayes, RandomForestClassifier, RandomForestRegressor
989c989,991
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
993,996c995
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/recommendation/ALS.html.raw:
1270c1270,1272
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1274,1277c1276
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/recommendation/ALSModel.html.raw:
892c892,894
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
896,899c898
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/regression/DecisionTreeRegressionModel.html.raw:
61a62,78
>               Instance Constructors
>               
>       
>       
>       
>       
>         
>         new
>       
>       
>         DecisionTreeRegressionModel(rootNode: Node)
>       
>       
>       Construct a decision tree regression model.Construct a decision tree regression model.rootNodeRoot node of tree, with other nodes attached.
> 
>     
>             
950c967,969
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
954,957c973
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1108a1125,1137
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/regression/DecisionTreeRegressor.html.raw:
1219c1219,1221
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1223,1226c1225
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/regression/GBTRegressionModel.html.raw:
937c937,939
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
941,944c943
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1108a1108,1120
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesGBTRegressionModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/regression/GBTRegressor.html.raw:
1325c1325,1327
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1329,1332c1331
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/regression/LinearRegression.html.raw:
27c27
<           LinearRegressionParams, HasTol, HasMaxIter, HasElasticNetParam, HasRegParam, Regressor[Vector, LinearRegression, LinearRegressionModel], Predictor[Vector, LinearRegression, LinearRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[LinearRegressionModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           LinearRegressionParams, HasStandardization, HasFitIntercept, HasTol, HasMaxIter, HasElasticNetParam, HasRegParam, Regressor[Vector, LinearRegression, LinearRegressionModel], Predictor[Vector, LinearRegression, LinearRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Estimator[LinearRegressionModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
45c45
<                   LinearRegressionLinearRegressionParamsHasTolHasMaxIterHasElasticNetParamHasRegParamRegressorPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   LinearRegressionLinearRegressionParamsHasStandardizationHasFitInterceptHasTolHasMaxIterHasElasticNetParamHasRegParamRegressorPredictorPredictorParamsHasPredictionColHasFeaturesColHasLabelColEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
490a491,503
>         val
>       
>       
>         fitIntercept: BooleanParam
>       
>       
>       Param for whether to fit an intercept term.Param for whether to fit an intercept term. Definition ClassesHasFitIntercept
>     
>       
>       
>       
>       
>         final 
560a574,586
>         getFitIntercept: Boolean
>       
>       
>        Definition ClassesHasFitIntercept
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
640a667,679
>         getStandardization: Boolean
>       
>       
>        Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
1054c1093,1095
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1058,1061c1099
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1114a1153,1166
>         setFitIntercept(value: Boolean): LinearRegression.this.type
>       
>       
>       Set if we should fit the intercept
> Default is true.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1168a1221,1238
>         setStandardization(value: Boolean): LinearRegression.this.type
>       
>       
>       Whether to standardize the training features before fitting the model.Whether to standardize the training features before fitting the model.
> The coefficients of models will be always returned on the original scale,
> so it will be transparent for users. Note that with/without standardization,
> the models should be always converged to the same solution when no regularization
> is applied. In R's GLMNET package, the default behavior is true as well.
> Default is true.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1180a1251,1263
>         val
>       
>       
>         standardization: BooleanParam
>       
>       
>       Param for whether to standardize the training features before fitting the model.Param for whether to standardize the training features before fitting the model.. Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         final 
1378a1462,1465
>               Inherited from HasStandardization
>             
>               Inherited from HasFitIntercept
>             



1.4.2/org/apache/spark/ml/regression/LinearRegressionModel.html.raw:
25c25
<           LinearRegressionParams, HasTol, HasMaxIter, HasElasticNetParam, HasRegParam, RegressionModel[Vector, LinearRegressionModel], PredictionModel[Vector, LinearRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[LinearRegressionModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           LinearRegressionParams, HasStandardization, HasFitIntercept, HasTol, HasMaxIter, HasElasticNetParam, HasRegParam, RegressionModel[Vector, LinearRegressionModel], PredictionModel[Vector, LinearRegressionModel], PredictorParams, HasPredictionCol, HasFeaturesCol, HasLabelCol, Model[LinearRegressionModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
43c43
<                   LinearRegressionModelLinearRegressionParamsHasTolHasMaxIterHasElasticNetParamHasRegParamRegressionModelPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   LinearRegressionModelLinearRegressionParamsHasStandardizationHasFitInterceptHasTolHasMaxIterHasElasticNetParamHasRegParamRegressionModelPredictionModelPredictorParamsHasPredictionColHasFeaturesColHasLabelColModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
391a392,404
>         val
>       
>       
>         fitIntercept: BooleanParam
>       
>       
>       Param for whether to fit an intercept term.Param for whether to fit an intercept term. Definition ClassesHasFitIntercept
>     
>       
>       
>       
>       
>         final 
461a475,487
>         getFitIntercept: Boolean
>       
>       
>        Definition ClassesHasFitIntercept
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
541a568,580
>         getStandardization: Boolean
>       
>       
>        Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         final 
>         def
>       
>       
594a634,646
>         hasSummary: Boolean
>       
>       
>       Indicates whether a training summary exists for this model instance.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1011c1063,1065
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1015,1018c1069
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1079a1131,1158
>         val
>       
>       
>         standardization: BooleanParam
>       
>       
>       Param for whether to standardize the training features before fitting the model.Param for whether to standardize the training features before fitting the model.. Definition ClassesHasStandardization
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         summary: LinearRegressionTrainingSummary
>       
>       
>       Gets summary (e.Gets summary (e.g. residuals, mse, r-squared ) of model on training set. An exception is
> thrown if trainingSummary == None.
> 
>     
>       
>       
>       
>       
>         final 
1169a1249,1261
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
1321a1414,1417
>               Inherited from HasStandardization
>             
>               Inherited from HasFitIntercept
>             



1.4.2/org/apache/spark/ml/regression/package.html.raw:
102a103,130
>         IsotonicRegression extends Regressor[Double, IsotonicRegression, IsotonicRegressionModel] with IsotonicRegressionParams
>       
>       
>       :: Experimental ::
> Isotonic regression.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         IsotonicRegressionModel extends RegressionModel[Double, IsotonicRegressionModel] with IsotonicRegressionParams
>       
>       
>       :: Experimental ::
> Model fitted by IsotonicRegression.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
126a155,182
>         
>         class
>       
>       
>         LinearRegressionSummary extends Serializable
>       
>       
>       :: Experimental ::
> Linear regression results evaluated on a dataset.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         LinearRegressionTrainingSummary extends LinearRegressionSummary
>       
>       
>       :: Experimental ::
> Linear regression training results.
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/ml/regression/RandomForestRegressionModel.html.raw:
61a62,78
>               Instance Constructors
>               
>       
>       
>       
>       
>         
>         new
>       
>       
>         RandomForestRegressionModel(trees: Array[DecisionTreeRegressionModel], numFeatures: Int)
>       
>       
>       Construct a random forest regression model, with all trees weighted equally.Construct a random forest regression model, with all trees weighted equally.treesComponent trees
> 
>     
>             
330a348,365
>         
>         lazy val
>       
>       
>         featureImportances: Vector
>       
>       
>       Estimate of the importance of each feature.Estimate of the importance of each feature.This generalizes the idea of "Gini" importance to other losses,
> following the explanation of Gini importance from "Random Forests" documentation
> by Leo Breiman and Adele Cutler, and following the implementation from scikit-learn.This feature importance is calculated as follows:Average over trees:importance(feature j) = sum (over nodes which split on feature j) of the gain,
>       where gain is scaled by the number of instances passing through nodeNormalize importances for tree based on total number of training instances used
>       to build tree.Normalize feature importance vector to sum to 1.
> 
>     
>       
>       
>       
>       
802a838,851
>         numFeatures: Int
>       
>       
>       Number of features used by this model
> 
>     
>       
>       
>       
>       
>         
>         val
>       
>       
920c969,971
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
924,927c975
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1091a1140,1152
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesRandomForestRegressionModel → PredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/regression/RandomForestRegressor.html.raw:
1320c1320,1322
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
1324,1327c1326
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/regression/RegressionModel.html.raw:
28c28
<           LinearRegressionModel
---
>           IsotonicRegressionModel, LinearRegressionModel
943c943,945
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
947,950c949
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1088a1088,1100
>         transformImpl(dataset: DataFrame): DataFrame
>       
>       
>        Attributesprotected Definition ClassesPredictionModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/ml/Transformer.html.raw:
28c28
<           ALSModel, Binarizer, Bucketizer, ClassificationModel, CrossValidatorModel, DecisionTreeClassificationModel, DecisionTreeRegressionModel, ElementwiseProduct, GBTClassificationModel, GBTRegressionModel, HashingTF, IDFModel, LinearRegressionModel, LogisticRegressionModel, Model, Normalizer, OneHotEncoder, OneVsRestModel, PipelineModel, PolynomialExpansion, PredictionModel, RandomForestClassificationModel, RandomForestRegressionModel, RegexTokenizer, RegressionModel, StandardScalerModel, StringIndexerModel, Tokenizer, UnaryTransformer, VectorAssembler, VectorIndexerModel, Word2VecModel
---
>           ALSModel, Binarizer, Bucketizer, ClassificationModel, CountVectorizerModel, CrossValidatorModel, DCT, DecisionTreeClassificationModel, DecisionTreeRegressionModel, ElementwiseProduct, GBTClassificationModel, GBTRegressionModel, HashingTF, IDFModel, IsotonicRegressionModel, KMeansModel, LinearRegressionModel, LogisticRegressionModel, MinMaxScalerModel, Model, MultilayerPerceptronClassifierModel, NGram, NaiveBayesModel, Normalizer, OneHotEncoder, OneVsRestModel, PCAModel, PipelineModel, PolynomialExpansion, PredictionModel, RFormulaModel, RandomForestClassificationModel, RandomForestRegressionModel, RegexTokenizer, RegressionModel, StandardScalerModel, StopWordsRemover, StringIndexerInverse, StringIndexerModel, Tokenizer, TrainValidationSplitModel, UnaryTransformer, VectorAssembler, VectorIndexerModel, Word2VecModel
837c837,839
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
841,844c843
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/ml/tuning/CrossValidator.html.raw:
25c25
<           CrossValidatorParams, Estimator[CrossValidatorModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           CrossValidatorParams, ValidatorParams, Estimator[CrossValidatorModel], PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
43c43
<                   CrossValidatorCrossValidatorParamsEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   CrossValidatorCrossValidatorParamsValidatorParamsEstimatorPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
306c306
<       param for the estimator to be cross-validatedparam for the estimator to be cross-validated Definition ClassesCrossValidatorParams
---
>       param for the estimator to be validatedparam for the estimator to be validated Definition ClassesValidatorParams
319c319
<       param for estimator param mapsparam for estimator param maps Definition ClassesCrossValidatorParams
---
>       param for estimator param mapsparam for estimator param maps Definition ClassesValidatorParams
332,334c332
<       param for the evaluator used to select hyper-parameters that maximize the cross-validated
< metricparam for the evaluator used to select hyper-parameters that maximize the cross-validated
< metric Definition ClassesCrossValidatorParams
---
>       param for the evaluator used to select hyper-parameters that maximize the validated metricparam for the evaluator used to select hyper-parameters that maximize the validated metric Definition ClassesValidatorParams
535c533
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
548c546
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
561c559
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
974c972,974
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
978,981c978
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1207a1205,1206
>               Inherited from ValidatorParams
>             



1.4.2/org/apache/spark/ml/tuning/CrossValidatorModel.html.raw:
25c25
<           CrossValidatorParams, Model[CrossValidatorModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
---
>           CrossValidatorParams, ValidatorParams, Model[CrossValidatorModel], Transformer, PipelineStage, Logging, Params, Serializable, Serializable, Identifiable, AnyRef, Any
43c43
<                   CrossValidatorModelCrossValidatorParamsModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
---
>                   CrossValidatorModelCrossValidatorParamsValidatorParamsModelTransformerPipelineStageLoggingParamsSerializableSerializableIdentifiableAnyRefAny
168a169,181
>         avgMetrics: Array[Double]
>       
>       
>       
>     
>       
>       
>       
>       
>         
>         val
>       
>       
290c303
<       param for the estimator to be cross-validatedparam for the estimator to be cross-validated Definition ClassesCrossValidatorParams
---
>       param for the estimator to be validatedparam for the estimator to be validated Definition ClassesValidatorParams
303c316
<       param for estimator param mapsparam for estimator param maps Definition ClassesCrossValidatorParams
---
>       param for estimator param mapsparam for estimator param maps Definition ClassesValidatorParams
316,318c329
<       param for the evaluator used to select hyper-parameters that maximize the cross-validated
< metricparam for the evaluator used to select hyper-parameters that maximize the cross-validated
< metric Definition ClassesCrossValidatorParams
---
>       param for the evaluator used to select hyper-parameters that maximize the validated metricparam for the evaluator used to select hyper-parameters that maximize the validated metric Definition ClassesValidatorParams
452c463
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
465c476
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
478c489
<        Definition ClassesCrossValidatorParams
---
>        Definition ClassesValidatorParams
919c930,932
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
923,926c936
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams
1159a1170,1171
>               Inherited from ValidatorParams
>             



1.4.2/org/apache/spark/ml/tuning/package.html.raw:
84a85,112
>         class
>       
>       
>         TrainValidationSplit extends Estimator[TrainValidationSplitModel] with TrainValidationSplitParams with Logging
>       
>       
>       :: Experimental ::
> Validation for hyper-parameter tuning.
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         TrainValidationSplitModel extends Model[TrainValidationSplitModel] with TrainValidationSplitParams
>       
>       
>       :: Experimental ::
> Model from train validation split.
>     
>             
> 
>         
> 
>         



1.4.2/org/apache/spark/ml/UnaryTransformer.html.raw:
29c29
<           ElementwiseProduct, Normalizer, PolynomialExpansion, RegexTokenizer, Tokenizer
---
>           CountVectorizerModel, DCT, ElementwiseProduct, NGram, Normalizer, PolynomialExpansion, RegexTokenizer, Tokenizer
890c890,892
<       Sets default values for a list of params.Sets default values for a list of params.
---
>       Sets default values for a list of params.Sets default values for a list of params.Note: Java developers should use the single-parameter setDefault().
>       Annotating this with varargs can cause compilation failures due to a Scala compiler bug.
>       See SPARK-9268.
894,897c896
<  Attributesprotected Definition ClassesParamsAnnotations
<                 @varargs()
<               
<         
---
>  Attributesprotected Definition ClassesParams



1.4.2/org/apache/spark/mllib/classification/ClassificationModel.html.raw:
84c84
< testDataarray representing a single data pointreturnspredicted category from the trained model
---
> testDataarray representing a single data pointreturnspredicted category from the trained model Since0.8.0
99c99
< testDataRDD representing data points to be predictedreturnsan RDD[Double] where each entry contains the corresponding prediction
---
> testDataRDD representing data points to be predictedreturnsan RDD[Double] where each entry contains the corresponding prediction Since0.8.0
338c338
<       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction
---
>       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction Since0.8.0



1.4.2/org/apache/spark/mllib/classification/LogisticRegressionModel$.html.raw:
257,259c257,259
<       Load a model from the given path.Load a model from the given path.The model should have been saved by Saveable.save.
< scSpark context used for loading model files.pathPath specifying the directory to which the model was saved.returnsModel instance
<  Definition ClassesLogisticRegressionModel → Loader
---
>       scSpark context used for loading model files.
> pathPath specifying the directory to which the model was saved.
> returnsModel instance Definition ClassesLogisticRegressionModel → LoaderSince1.3.0



1.4.2/org/apache/spark/mllib/classification/LogisticRegressionModel.html.raw:
192,193c192
< It is only used for binary classification.
<  Annotations
---
> It is only used for binary classification. Annotations
195a195
>         Since1.0.0
302,303c302
< It is only used for binary classification.
<  Annotations
---
> It is only used for binary classification. Annotations
305a305
>         Since1.3.0
429,430c429,430
<       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction
<  Definition ClassesClassificationModel
---
>       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction Definition ClassesClassificationModelSince0.8.0
> 
488,491c488,490
<       Save this model to the given path.Save this model to the given path.This saves:human-readable (JSON) model metadata to path/metadata/Parquet formatted data to path/data/The model may be loaded using Loader.load.
< scSpark context used to save model data.pathPath specifying the directory in which to save this model.
<              If the directory already exists, this method throws an exception.
<  Definition ClassesLogisticRegressionModel → Saveable
---
>       scSpark context used to save model data.
> pathPath specifying the directory in which to save this model.
>              If the directory already exists, this method throws an exception. Definition ClassesLogisticRegressionModel → SaveableSince1.3.0
510,511c509
< It is only used for binary classification.
<  Annotations
---
> It is only used for binary classification. Annotations
513a512
>         Since1.0.0
620,621c619,620
<       Print a summary of the model.Print a summary of the model.
<  Definition ClassesLogisticRegressionModel → GeneralizedLinearModel → AnyRef → Any
---
>        Definition ClassesLogisticRegressionModel → GeneralizedLinearModel → AnyRef → AnySince1.4.0
> 



1.4.2/org/apache/spark/mllib/classification/LogisticRegressionWithLBFGS.html.raw:
644,645c644
< By default, it is binary logistic regression so k will be set to 2.
<  Annotations
---
> By default, it is binary logistic regression so k will be set to 2. Annotations
647a647
>         Since1.3.0



1.4.2/org/apache/spark/mllib/classification/LogisticRegressionWithSGD$.html.raw:
328c328
< inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.returnsa LogisticRegressionModel which has the weights and offset from training.
---
> inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.returnsa LogisticRegressionModel which has the weights and offset from training. Since1.0.0
347c347
< returnsa LogisticRegressionModel which has the weights and offset from training.
---
> returnsa LogisticRegressionModel which has the weights and offset from training. Since1.0.0
366c366
< miniBatchFractionFraction of data to be used per iteration.
---
> miniBatchFractionFraction of data to be used per iteration. Since1.0.0
386c386
<        the number of features in the data.
---
>        the number of features in the data. Since1.0.0



1.4.2/org/apache/spark/mllib/classification/NaiveBayes$.html.raw:
333c333
<              multinomial or bernoulli
---
>              multinomial or bernoulli Since0.9.0
351c351
<              vector or a count vector.lambdaThe smoothing parameter
---
>              vector or a count vector.lambdaThe smoothing parameter Since0.9.0
369c369
<              vector or a count vector.
---
>              vector or a count vector. Since0.9.0



1.4.2/org/apache/spark/mllib/classification/NaiveBayesModel.html.raw:
351,352c351,352
< testDataarray representing a single data pointreturnspredicted category from the trained model
<  Definition ClassesNaiveBayesModel → ClassificationModel
---
> testDataarray representing a single data pointreturnspredicted category from the trained model Definition ClassesNaiveBayesModel → ClassificationModelSince0.8.0
> 
366,367c366,367
< testDataRDD representing data points to be predictedreturnsan RDD[Double] where each entry contains the corresponding prediction
<  Definition ClassesNaiveBayesModel → ClassificationModel
---
> testDataRDD representing data points to be predictedreturnsan RDD[Double] where each entry contains the corresponding prediction Definition ClassesNaiveBayesModel → ClassificationModelSince0.8.0
> 
380,381c380,413
<       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction
<  Definition ClassesClassificationModel
---
>       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction Definition ClassesClassificationModelSince0.8.0
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictProbabilities(testData: Vector): Vector
>       
>       
>       Predict posterior class probabilities for a single data point using the model trained.Predict posterior class probabilities for a single data point using the model trained.
> testDataarray representing a single data pointreturnspredicted posterior class probabilities from the trained model,
>         in the same order as class labels
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         predictProbabilities(testData: RDD[Vector]): RDD[Vector]
>       
>       
>       Predict values for the given data set using the model trained.Predict values for the given data set using the model trained.
> testDataRDD representing data points to be predictedreturnsan RDD[Vector] where each entry contains the predicted posterior class probabilities,
>         in the same order as class labels
> 



1.4.2/org/apache/spark/mllib/classification/SVMModel$.html.raw:
257,259c257,259
<       Load a model from the given path.Load a model from the given path.The model should have been saved by Saveable.save.
< scSpark context used for loading model files.pathPath specifying the directory to which the model was saved.returnsModel instance
<  Definition ClassesSVMModel → Loader
---
>       scSpark context used for loading model files.
> pathPath specifying the directory to which the model was saved.
> returnsModel instance Definition ClassesSVMModel → LoaderSince1.3.0



1.4.2/org/apache/spark/mllib/classification/SVMModel.html.raw:
174,175c174
< Clears the threshold so that predict will output raw prediction scores.
<  Annotations
---
> Clears the threshold so that predict will output raw prediction scores. Annotations
177a177
>         Since1.0.0
283,284c283
< Returns the threshold (if any) used for converting raw prediction scores into 0/1 predictions.
<  Annotations
---
> Returns the threshold (if any) used for converting raw prediction scores into 0/1 predictions. Annotations
286a286
>         Since1.3.0
379,380c379,380
<       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction
<  Definition ClassesClassificationModel
---
>       Predict values for examples stored in a JavaRDD.Predict values for examples stored in a JavaRDD.testDataJavaRDD representing data points to be predictedreturnsa JavaRDD[java.lang.Double] where each entry contains the corresponding prediction Definition ClassesClassificationModelSince0.8.0
> 
438,441c438,440
<       Save this model to the given path.Save this model to the given path.This saves:human-readable (JSON) model metadata to path/metadata/Parquet formatted data to path/data/The model may be loaded using Loader.load.
< scSpark context used to save model data.pathPath specifying the directory in which to save this model.
<              If the directory already exists, this method throws an exception.
<  Definition ClassesSVMModel → Saveable
---
>       scSpark context used to save model data.
> pathPath specifying the directory in which to save this model.
>              If the directory already exists, this method throws an exception. Definition ClassesSVMModel → SaveableSince1.3.0
458,459c457
< and negative otherwise. The default value is 0.0.
<  Annotations
---
> and negative otherwise. The default value is 0.0. Annotations
461a460
>         Since1.3.0
568,569c567,568
<       Print a summary of the model.Print a summary of the model.
<  Definition ClassesSVMModel → GeneralizedLinearModel → AnyRef → Any
---
>        Definition ClassesSVMModel → GeneralizedLinearModel → AnyRef → AnySince1.4.0
> 



1.4.2/org/apache/spark/mllib/classification/SVMWithSGD$.html.raw:
327c327
< inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.returnsa SVMModel which has the weights and offset from training.
---
> inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.returnsa SVMModel which has the weights and offset from training. Since0.8.0
345c345
< inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.stepSizeStep size to be used for each iteration of Gradient Descent.regParamRegularization parameter.returnsa SVMModel which has the weights and offset from training.
---
> inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.stepSizeStep size to be used for each iteration of Gradient Descent.regParamRegularization parameter.returnsa SVMModel which has the weights and offset from training. Since0.8.0
363c363
< inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.stepSizeStep size to be used for each iteration of gradient descent.regParamRegularization parameter.miniBatchFractionFraction of data to be used per iteration.
---
> inputRDD of (label, array of features) pairs.numIterationsNumber of iterations of gradient descent to run.stepSizeStep size to be used for each iteration of gradient descent.regParamRegularization parameter.miniBatchFractionFraction of data to be used per iteration. Since0.8.0
382c382
<        the number of features in the data.
---
>        the number of features in the data. Since0.8.0



1.4.2/org/apache/spark/mllib/clustering/DistributedLDAModel.html.raw:
27c27
<           LDAModel, AnyRef, Any
---
>           LDAModel, Saveable, AnyRef, Any
45c45
<                   DistributedLDAModelLDAModelAnyRefAny
---
>                   DistributedLDAModelLDAModelSaveableAnyRefAny
180,182c180
<       Return the topics described by weighted terms.Return the topics described by weighted terms.This limits the number of terms per topic.
< This is approximate; it may not return exactly the top-weighted terms for each topic.
< To get a more precise set of top terms, increase maxTermsPerTopic.
---
>       Return the topics described by weighted terms.Return the topics described by weighted terms.
208a207,222
>         
>         val
>       
>       
>         docConcentration: Vector
>       
>       
>       Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").This is the parameter to a Dirichlet distribution.
>  Definition ClassesDistributedLDAModel → LDAModel
>     
>       
>       
>       
>       
253a268,295
>         
>         def
>       
>       
>         formatVersion: String
>       
>       
>       Current version of model save/load format.Current version of model save/load format. Attributesprotected Definition ClassesDistributedLDAModel → Saveable
>     
>       
>       
>       
>       
>         
>         val
>       
>       
>         gammaShape: Double
>       
>       
>       Shape parameter for random initialization of variational parameter gamma.Shape parameter for random initialization of variational parameter gamma.
> Used for variational inference for perplexity and other test-time computations.
>  Attributesprotected[org.apache.spark.mllib.clustering] Definition ClassesDistributedLDAModel → LDAModel
>     
>       
>       
>       
>       
391a434,449
>         
>         def
>       
>       
>         save(sc: SparkContext, path: String): Unit
>       
>       
>       Save this model to the given path.Save this model to the given path.This saves:human-readable (JSON) model metadata to path/metadata/Parquet formatted data to path/data/The model may be loaded using Loader.load.
> scSpark context used to save model data.pathPath specifying the directory in which to save this model.
>              If the directory already exists, this method throws an exception.
>  Definition ClassesDistributedLDAModel → Saveable
>     
>       
>       
>       
>       
437a496,544
>         topDocumentsPerTopic(maxDocumentsPerTopic: Int): Array[(Array[Long], Array[Double])]
>       
>       
>       Return the top documents for each topic
> Return the top documents for each topic
> maxDocumentsPerTopicMaximum number of documents to collect for each topic.returnsArray over topics.  Each element represent as a pair of matching arrays:
>          (IDs for the documents, weights of the topic in these documents).
>          For each topic, documents are sorted in order of decreasing topic weights.
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         topTopicsPerDocument(k: Int): RDD[(Long, Array[Int], Array[Double])]
>       
>       
>       For each document, return the top k weighted topics for that document and their weights.For each document, return the top k weighted topics for that document and their weights.returnsRDD of (doc ID, topic indices, topic weights)
> 
>     
>       
>       
>       
>       
>         
>         val
>       
>       
>         topicConcentration: Double
>       
>       
>       Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.This is the parameter to a symmetric Dirichlet distribution.Note: The topics' distributions over terms are called "beta" in the original LDA paper
> by Blei et al., but are called "phi" in many later papers such as Asuncion et al., 2009.
>  Definition ClassesDistributedLDAModel → LDAModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
543a651,652
>               Inherited from Saveable
>             



1.4.2/org/apache/spark/mllib/clustering/GaussianMixtureModel.html.raw:
372,384d371
<         predict(point: Vector): Int
<       
<       
<       Maps given point to its cluster index.
<     
<       
<       
<       
<       
<         
<         def
<       
<       
398,410d384
<         predictSoft(point: Vector): Array[Double]
<       
<       
<       Given the input vector, return the membership values to all mixture components.
<     
<       
<       
<       
<       
<         
<         def
<       
<       



1.4.2/org/apache/spark/mllib/clustering/KMeans.html.raw:
610a611,627
>         setInitialModel(model: KMeansModel): KMeans.this.type
>       
>       
>       Set the initial starting point, bypassing the random initialization or k-means||
> The condition model.Set the initial starting point, bypassing the random initialization or k-means||
> The condition model.k == this.k must be met, failure results
> in an IllegalArgumentException.
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/mllib/clustering/LDA.html.raw:
238c238
<         getAlpha: Double
---
>         getAlpha: Vector
290c290
<         getDocConcentration: Double
---
>         getDocConcentration: Vector
295c295
< distributions over topics ("theta").This is the parameter to a symmetric Dirichlet distribution.
---
> distributions over topics ("theta").This is the parameter to a Dirichlet distribution.
657a658,670
>         setAlpha(alpha: Vector): LDA.this.type
>       
>       
>       Alias for setDocConcentration()
>     
>       
>       
>       
>       
>         
>         def
>       
>       
691a705,717
>       Replicates Double to create a symmetric prior
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         setDocConcentration(docConcentration: Vector): LDA.this.type
>       
>       
694,697c720,726
< distributions over topics ("theta").This is the parameter to a symmetric Dirichlet distribution, where larger values
< mean more smoothing (more regularization).If set to -1, then docConcentration is set automatically.
<  (default = -1 = automatic)Optimizer-specific parameter settings:EMValue should be > 1.0default = (50 / k) + 1, where 50/k is common in LDA libraries and +1 follows
<       Asuncion et al. (2009), who recommend a +1 adjustment for EM.OnlineValue should be >= 0default = (1.0 / k), following the implementation from
---
> distributions over topics ("theta").This is the parameter to a Dirichlet distribution, where larger values mean more smoothing
> (more regularization).If set to a singleton vector Vector(-1), then docConcentration is set automatically. If set to
> singleton vector Vector(t) where t != -1, then t is replicated to a vector of length k during
> LDAOptimizer.initialize(). Otherwise, the docConcentration vector must be length k.
> (default = Vector(-1) = automatic)Optimizer-specific parameter settings:EMCurrently only supports symmetric distributions, so all values in the vector should be
>       the same.Values should be > 1.0default = uniformly (50 / k) + 1, where 50/k is common in LDA libraries and +1 follows
>       from Asuncion et al. (2009), who recommend a +1 adjustment for EM.OnlineValues should be >= 0default = uniformly (1.0 / k), following the implementation from



1.4.2/org/apache/spark/mllib/clustering/LDAModel.html.raw:
14c14
<         LDAModel extends AnyRef
---
>         LDAModel extends Saveable
25c25
<           AnyRef, Any
---
>           Saveable, AnyRef, Any
46c46
<                   LDAModelAnyRefAny
---
>                   LDAModelSaveableAnyRefAny
82,84c82
<       Return the topics described by weighted terms.Return the topics described by weighted terms.This limits the number of terms per topic.
< This is approximate; it may not return exactly the top-weighted terms for each topic.
< To get a more precise set of top terms, increase maxTermsPerTopic.
---
>       Return the topics described by weighted terms.Return the topics described by weighted terms.
97a96,139
>         docConcentration: Vector
>       
>       
>       Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").This is the parameter to a Dirichlet distribution.
> 
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
>         formatVersion: String
>       
>       
>       Current version of model save/load format.Current version of model save/load format. Attributesprotected Definition ClassesSaveable
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
>         gammaShape: Double
>       
>       
>       Shape parameter for random initialization of variational parameter gamma.Shape parameter for random initialization of variational parameter gamma.
> Used for variational inference for perplexity and other test-time computations.
>  Attributesprotected 
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
110a153,185
>         save(sc: SparkContext, path: String): Unit
>       
>       
>       Save this model to the given path.Save this model to the given path.This saves:human-readable (JSON) model metadata to path/metadata/Parquet formatted data to path/data/The model may be loaded using Loader.load.
> scSpark context used to save model data.pathPath specifying the directory in which to save this model.
>              If the directory already exists, this method throws an exception.
>  Definition ClassesSaveable
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
>         topicConcentration: Double
>       
>       
>       Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.This is the parameter to a symmetric Dirichlet distribution.Note: The topics' distributions over terms are called "beta" in the original LDA paper
> by Blei et al., but are called "phi" in many later papers such as Asuncion et al., 2009.
> 
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
465a541,542
>               Inherited from Saveable
>             



1.4.2/org/apache/spark/mllib/clustering/LocalLDAModel.html.raw:
21,22c21
< than the DistributedLDAModel.
<  Annotations
---
> than the DistributedLDAModel. Annotations
27c26
<           Serializable, Serializable, LDAModel, AnyRef, Any
---
>           Serializable, Serializable, LDAModel, Saveable, AnyRef, Any
45c44
<                   LocalLDAModelSerializableSerializableLDAModelAnyRefAny
---
>                   LocalLDAModelSerializableSerializableLDAModelSaveableAnyRefAny
180,182c179
<       Return the topics described by weighted terms.Return the topics described by weighted terms.This limits the number of terms per topic.
< This is approximate; it may not return exactly the top-weighted terms for each topic.
< To get a more precise set of top terms, increase maxTermsPerTopic.
---
>       Return the topics described by weighted terms.Return the topics described by weighted terms.
208a206,221
>         
>         val
>       
>       
>         docConcentration: Vector
>       
>       
>       Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").Concentration parameter (commonly named "alpha") for the prior placed on documents'
> distributions over topics ("theta").This is the parameter to a Dirichlet distribution.
>  Definition ClassesLocalLDAModel → LDAModel
>     
>       
>       
>       
>       
253a267,294
>         
>         def
>       
>       
>         formatVersion: String
>       
>       
>       Current version of model save/load format.Current version of model save/load format. Attributesprotected Definition ClassesLocalLDAModel → Saveable
>     
>       
>       
>       
>       
>         
>         val
>       
>       
>         gammaShape: Double
>       
>       
>       Shape parameter for random initialization of variational parameter gamma.Shape parameter for random initialization of variational parameter gamma.
> Used for variational inference for perplexity and other test-time computations.
>  Attributesprotected[org.apache.spark.mllib.clustering] Definition ClassesLocalLDAModel → LDAModel
>     
>       
>       
>       
>       
305a347,377
>         
>         def
>       
>       
>         logLikelihood(documents: RDD[(Long, Vector)]): Double
>       
>       
>       Calculates a lower bound on the log likelihood of the entire corpus.Calculates a lower bound on the log likelihood of the entire corpus.See Equation (16) in original Online LDA paper.
> documentstest corpus to use for calculating log likelihoodreturnsvariational lower bound on the log likelihood of the entire corpus
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         logPerplexity(documents: RDD[(Long, Vector)]): Double
>       
>       
>       Calculate an upper bound bound on perplexity.Calculate an upper bound bound on perplexity.  (Lower is better.)
> See Equation (16) in original Online LDA paper.
> documentstest corpus to use for calculating perplexityreturnsVariational upper bound on log perplexity per token.
> 
>     
>       
>       
>       
>       
344a417,432
>         
>         def
>       
>       
>         save(sc: SparkContext, path: String): Unit
>       
>       
>       Save this model to the given path.Save this model to the given path.This saves:human-readable (JSON) model metadata to path/metadata/Parquet formatted data to path/data/The model may be loaded using Loader.load.
> scSpark context used to save model data.pathPath specifying the directory in which to save this model.
>              If the directory already exists, this method throws an exception.
>  Definition ClassesLocalLDAModel → Saveable
>     
>       
>       
>       
>       
371a460,507
>         val
>       
>       
>         topicConcentration: Double
>       
>       
>       Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.Concentration parameter (commonly named "beta" or "eta") for the prior placed on topics'
> distributions over terms.This is the parameter to a symmetric Dirichlet distribution.Note: The topics' distributions over terms are called "beta" in the original LDA paper
> by Blei et al., but are called "phi" in many later papers such as Asuncion et al., 2009.
>  Definition ClassesLocalLDAModel → LDAModel
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         topicDistributions(documents: RDD[(Long, Vector)]): RDD[(Long, Vector)]
>       
>       
>       Predicts the topic mixture distribution for each document (often called "theta" in the
> literature).Predicts the topic mixture distribution for each document (often called "theta" in the
> literature).  Returns a vector of zeros for an empty document.This uses a variational approximation following Hoffman et al. (2010), where the approximate
> distribution is called "gamma."  Technically, this method returns this approximation "gamma"
> for each document.documentsdocuments to predict topic mixture distributions forreturnsAn RDD of (document ID, topic mixture distribution for document)
> 
>     
>       
>       
>       
>       
>         
>         val
>       
>       
>         topics: Matrix
>       
>       
>       Inferred topics (vocabSize x k matrix).
>     
>       
>       
>       
>       
>         
467a604,605
>               Inherited from Saveable
>             



1.4.2/org/apache/spark/mllib/clustering/OnlineLDAOptimizer.html.raw:
278a279,292
>         getOptimzeAlpha: Boolean
>       
>       
>       Optimize alpha, indicates whether alpha (Dirichlet parameter for document-topic distribution)
> will be optimized during training.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
393a408,421
>         setOptimzeAlpha(optimizeAlpha: Boolean): OnlineLDAOptimizer.this.type
>       
>       
>       Sets whether to optimize alpha parameter during training.Sets whether to optimize alpha parameter during training.Default: false
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/mllib/clustering/package.html.raw:
138c138
<         LDAModel extends AnyRef
---
>         LDAModel extends Saveable
248a249,264
>         DistributedLDAModel extends Loader[DistributedLDAModel]
>       
>       
>        Annotations
>                 @Experimental()
>               
>         
>     
>       
>       
>       
>       
>         
>         object
>       
>       
290a307,335
>         LDAUtils
>       
>       
>       Utility methods for LDA.
>     
>       
>       
>       
>       
>         
>         object
>       
>       
>         LocalLDAModel extends Loader[LocalLDAModel] with Serializable
>       
>       
>        Annotations
>                 @Experimental()
>               
>         
>     
>       
>       
>       
>       
>         
>         object
>       
>       



1.4.2/org/apache/spark/mllib/clustering/PowerIterationClustering.html.raw:
351a352,372
>         run(graph: Graph[Double, Double]): PowerIterationClusteringModel
>       
>       
>       Run the PIC algorithm on Graph.Run the PIC algorithm on Graph.
> graphan affinity matrix represented as graph, which is the matrix A in the PIC paper.
>              The similarity sij represented as the edge between vertices (i, j) must
>              be nonnegative. This is a symmetric matrix and hence sij = sji. For
>              any (i, j) with nonzero similarity, there should be either (i, j, sij)
>              or (j, i, sji) in the input. Tuples with i = j are ignored, because we
>              assume sij = 0.0.
> returnsa PowerIterationClusteringModel that contains the clustering result
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/mllib/evaluation/RegressionMetrics.html.raw:
221,223c221,222
<       Returns the explained variance regression score.Returns the explained variance regression score.
< explainedVariance = 1 - variance(y - \hat{y}) / variance(y)
< Reference: http://en.wikipedia.org/wiki/Explained_variation
---
>       Returns the variance explained by regression.Returns the variance explained by regression.
> explainedVariance = \sum_i (\hat{y_i} - \bar{y})^2 / n See alsohttps://en.wikipedia.org/wiki/Fraction_of_variance_unexplained
531,532c530
<       Returns R2, the coefficient of determination.Returns R2, the coefficient of determination.
< Reference: http://en.wikipedia.org/wiki/Coefficient_of_determination
---
>       Returns R2, the unadjusted coefficient of determination.Returns R2, the unadjusted coefficient of determination. See alsohttp://en.wikipedia.org/wiki/Coefficient_of_determination



1.4.2/org/apache/spark/mllib/feature/package.html.raw:
239d238
<         



1.4.2/org/apache/spark/mllib/feature/Word2VecModel.html.raw:
19,20c19
< Word2Vec model
<  Annotations
---
> Word2Vec model Annotations
61a61,76
>               Instance Constructors
>               
>       
>       
>       
>       
>         
>         new
>       
>       
>         Word2VecModel(model: Map[String, Array[Float]])
>       
>       
>       
>     
>             



1.4.2/org/apache/spark/mllib/fpm/FPGrowth$$FreqItemset.html.raw:
18a19
>  Since1.3.0
300c301,303
<       Returns items in a Java List.
---
>       Returns items in a Java List.Returns items in a Java List.
>  Since1.3.0
> 



1.4.2/org/apache/spark/mllib/fpm/FPGrowth$.html.raw:
21a22
>         Since1.3.0



1.4.2/org/apache/spark/mllib/fpm/FPGrowth.html.raw:
26a27
>         Since1.3.0
81a83
> as the input data}.Constructs a default instance with default parameters {minSupport: 0.3, numPartitions: same
82a85,86
>  Since1.3.0
> 
506a511
>  Since1.3.0
520c525,527
<       Sets the minimal support level (default: 0.3).
---
>       Sets the minimal support level (default: 0.3).Sets the minimal support level (default: 0.3).
>  Since1.3.0
> 
533c540,542
<       Sets the number of partitions used by parallel FP-growth (default: same as input data).
---
>       Sets the number of partitions used by parallel FP-growth (default: same as input data).Sets the number of partitions used by parallel FP-growth (default: same as input data).
>  Since1.3.0
> 



1.4.2/org/apache/spark/mllib/fpm/FPGrowthModel.html.raw:
21a22
>         Since1.3.0
243a245,258
>         
>         def
>       
>       
>         generateAssociationRules(confidence: Double): RDD[Rule[Item]]
>       
>       
>       Generates association rules for the Items in freqItemsets.Generates association rules for the Items in freqItemsets.confidenceminimal confidence of the rules produced Since1.5.0
> 
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/mllib/fpm/package.html.raw:
45a46,58
>         AssociationRules extends Logging with Serializable
>       
>       
>       :: Experimental ::
>     
>       
>       
>       
>       
>         
>         class
>       
>       
68a82,107
>         class
>       
>       
>         PrefixSpan extends Logging with Serializable
>       
>       
>       :: Experimental ::
>     
>       
>       
>       
>       
>         
>         class
>       
>       
>         PrefixSpanModel[Item] extends Serializable
>       
>       
>       Model fitted by PrefixSpan
>     
>             
> 
>         
> 
>         
78a118,130
>         AssociationRules extends Serializable
>       
>       
>       
>     
>       
>       
>       
>       
>         
>         object
>       
>       
89a142,157
>         object
>       
>       
>         PrefixSpan extends Logging with Serializable
>       
>       
>        Annotations
>                 @Experimental()
>               
>         
>     
>             
> 
>         
> 
>         



1.4.2/org/apache/spark/mllib/linalg/DenseMatrix.html.raw:
414a415,428
>         def
>       
>       
>         numActives: Int
>       
>       
>       Find the number of values stored explicitly.Find the number of values stored explicitly. These values can be zero as well.
>  Definition ClassesDenseMatrix → Matrix
>     
>       
>       
>       
>       
>         
427a442,455
>         def
>       
>       
>         numNonzeros: Int
>       
>       
>       Find the number of non-zero active values.Find the number of non-zero active values.
>  Definition ClassesDenseMatrix → Matrix
>     
>       
>       
>       
>       
>         



1.4.2/org/apache/spark/mllib/linalg/DenseVector.html.raw:
167a168,182
>         
>         def
>       
>       
>         argmax: Int
>       
>       
>       Find the index of a maximal element.Find the index of a maximal element.  Returns the first maximal element in case of a tie.
> Returns -1 if vector has length 0.
>  Definition ClassesDenseVector → Vector
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/mllib/linalg/distributed/RowMatrix.html.raw:
714a715,733
>         tallSkinnyQR(computeQ: Boolean = false): QRDecomposition[RowMatrix, Matrix]
>       
>       
>       Compute QR decomposition for RowMatrix.Compute QR decomposition for RowMatrix. The implementation is designed to optimize the QR
> decomposition (factorization) for the RowMatrix of a tall and skinny shape.
> Reference:
>  Paul G. Constantine, David F. Gleich. "Tall and skinny QR factorizations in MapReduce
>  architectures"  (http://dx.doi.org/10.1145/1996092.1996103)
> computeQwhether to computeQreturnsQRDecomposition(Q, R), Q = null if computeQ = false.
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/mllib/linalg/Matrix.html.raw:
103a104,117
>         numActives: Int
>       
>       
>       Find the number of values stored explicitly.Find the number of values stored explicitly. These values can be zero as well.
> 
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       
116a131,143
>         numNonzeros: Int
>       
>       
>       Find the number of non-zero active values.
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       



1.4.2/org/apache/spark/mllib/linalg/package.html.raw:
84a85,98
>         QRDecomposition[UType, VType](Q: UType, R: VType) extends Product with Serializable
>       
>       
>       :: Experimental ::
> Represents QR factors.
>     
>       
>       
>       
>       
>         
>         case class
>       
>       



1.4.2/org/apache/spark/mllib/linalg/SparseMatrix.html.raw:
433a434,447
>         def
>       
>       
>         numActives: Int
>       
>       
>       Find the number of values stored explicitly.Find the number of values stored explicitly. These values can be zero as well.
>  Definition ClassesSparseMatrix → Matrix
>     
>       
>       
>       
>       
>         
446a461,474
>         def
>       
>       
>         numNonzeros: Int
>       
>       
>       Find the number of non-zero active values.Find the number of non-zero active values.
>  Definition ClassesSparseMatrix → Matrix
>     
>       
>       
>       
>       
>         



1.4.2/org/apache/spark/mllib/linalg/SparseVector.html.raw:
168a169,183
>         
>         def
>       
>       
>         argmax: Int
>       
>       
>       Find the index of a maximal element.Find the index of a maximal element.  Returns the first maximal element in case of a tie.
> Returns -1 if vector has length 0.
>  Definition ClassesSparseVector → Vector
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/mllib/linalg/Vector.html.raw:
77a78,92
>         argmax: Int
>       
>       
>       Find the index of a maximal element.Find the index of a maximal element.  Returns the first maximal element in case of a tie.
> Returns -1 if vector has length 0.
> 
>     
>       
>       
>       
>       
>         abstract 
>         def
>       
>       



1.4.2/org/apache/spark/mllib/optimization/GradientDescent$.html.raw:
469a470,482
>       
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         runMiniBatchSGD(data: RDD[(Double, Vector)], gradient: Gradient, updater: Updater, stepSize: Double, numIterations: Int, regParam: Double, miniBatchFraction: Double, initialWeights: Vector, convergenceTol: Double): (Vector, Array[Double])
>       
>       
475,479c488,494
< data- Input data for SGD. RDD of the set of data examples, each of
<               the form (label, [feature values]).gradient- Gradient object (used to compute the gradient of the loss function of
<                   one single data example)updater- Updater function to actually perform a gradient step in a given direction.stepSize- initial step size for the first stepnumIterations- number of iterations that SGD should be run.regParam- regularization parameterminiBatchFraction- fraction of the input data set that should be used for
<                            one iteration of SGD. Default value 1.0.
< returnsA tuple containing two elements. The first element is a column matrix containing
---
> dataInput data for SGD. RDD of the set of data examples, each of
>             the form (label, [feature values]).gradientGradient object (used to compute the gradient of the loss function of
>                 one single data example)updaterUpdater function to actually perform a gradient step in a given direction.stepSizeinitial step size for the first stepnumIterationsnumber of iterations that SGD should be run.regParamregularization parameterminiBatchFractionfraction of the input data set that should be used for
>                          one iteration of SGD. Default value 1.0.convergenceTolMinibatch iteration will end before numIterations if the relative
>                       difference between the current weight and the previous weight is less
>                       than this value. In measuring convergence, L2 norm is calculated.
>                       Default value 0.001. Must be between 0.0 and 1.0 inclusively.returnsA tuple containing two elements. The first element is a column matrix containing



1.4.2/org/apache/spark/mllib/optimization/GradientDescent.html.raw:
480a481,502
>         setConvergenceTol(tolerance: Double): GradientDescent.this.type
>       
>       
>       Set the convergence tolerance.Set the convergence tolerance. Default 0.001
> convergenceTol is a condition which decides iteration termination.
> The end of iteration is decided based on below logic.
> - If the norm of the new solution vector is >1, the diff of solution vectors
>   is compared to relative tolerance which means normalizing by the norm of
>   the new solution vector.
> - If the norm of the new solution vector is <=1, the diff of solution vectors
>   is compared to absolute tolerance which is not normalizing.
> Must be between 0.0 and 1.0 inclusively.
> 
>     
>       
>       
>       
>       
>         
>         def
>       
>       



1.4.2/org/apache/spark/mllib/recommendation/ALS$.html.raw:
18c18
<           Top-level methods for calling Alternating Least Squares (ALS) matrix factorization.
---
>           Top-level methods for calling Alternating Least Squares (ALS) matrix factorization. Since0.8.0
329c329
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20) Since0.8.0
349c349
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01) Since0.8.0
369c369
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation into
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation into Since0.8.0
389c389
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoseedrandom seed
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoseedrandom seed Since0.9.1
410c410
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20) Since0.8.1
430c430
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)alphaconfidence parameter
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)alphaconfidence parameter Since0.8.1
450c450
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoalphaconfidence parameter
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoalphaconfidence parameter Since0.8.1
470c470
< ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoalphaconfidence parameterseedrandom seed
---
> ratingsRDD of (userID, productID, rating) pairsranknumber of features to useiterationsnumber of iterations of ALS (recommended: 10-20)lambdaregularization factor (recommended: 0.01)blockslevel of parallelism to split computation intoalphaconfidence parameterseedrandom seed Since0.8.1



1.4.2/org/apache/spark/mllib/recommendation/MatrixFactorizationModel$.html.raw:
17a18
>            Since1.3.0
258,259c259,260
< scSpark context used for loading model files.pathPath specifying the directory to which the model was saved.returnsModel instance
<  Definition ClassesMatrixFactorizationModel → Loader
---
> scSpark context used for loading model files.pathPath specifying the directory to which the model was saved.returnsModel instance Definition ClassesMatrixFactorizationModel → LoaderSince1.3.0
> 



1.4.2/org/apache/spark/mllib/recommendation/MatrixFactorizationModel.html.raw:
19a20
>  Since0.8.0
83d83
<         
499c499,500
<       Java-friendly version of MatrixFactorizationModel.predict.
---
>       Java-friendly version of MatrixFactorizationModel.predict.Java-friendly version of MatrixFactorizationModel.predict. Since1.2.0
> 
515c516
< usersProductsRDD of (user, product) pairs.returnsRDD of Ratings.
---
> usersProductsRDD of (user, product) pairs.returnsRDD of Ratings. Since0.9.0
529c530,531
<       Predict the rating of one user for one product.
---
>       Predict the rating of one user for one product.Predict the rating of one user for one product. Since0.8.0
> 
574c576
<  recommended the product is.
---
>  recommended the product is. Since1.1.0
591c593
< rating field. Semantics of score is same as recommendProducts API
---
> rating field. Semantics of score is same as recommendProducts API Since1.4.0
611c613
<  recommended the user is.
---
>  recommended the user is. Since1.1.0
628c630
< rating field. Semantics of score is same as recommendUsers API
---
> rating field. Semantics of score is same as recommendUsers API Since1.4.0
644,645c646,647
<              If the directory already exists, this method throws an exception.
<  Definition ClassesMatrixFactorizationModel → Saveable
---
>              If the directory already exists, this method throws an exception. Definition ClassesMatrixFactorizationModel → SaveableSince1.3.0
> 



1.4.2/org/apache/spark/mllib/recommendation/Rating.html.raw:
18c18
<           A more compact class to represent a rating than Tuple3[Int, Int, Double].
---
>           A more compact class to represent a rating than Tuple3[Int, Int, Double]. Since0.8.0



1.4.2/org/apache/spark/mllib/regression/StreamingLinearRegressionWithSGD.html.raw:
591a592,604
>         setConvergenceTol(tolerance: Double): StreamingLinearRegressionWithSGD.this.type
>       
>       
>       Set the convergence tolerance.
>     
>       
>       
>       
>       
>         
>         def
>       
>       
595c608
<       Set the initial weights.Set the initial weights. Default: [0.0, 0.0].
---
>       Set the initial weights.



1.4.2/org/apache/spark/mllib/stat/distribution/MultivariateGaussian.html.raw:
25a26
>         Since1.3.0
87d87
<         
282c282,283
<       Returns the log-density of this multivariate Gaussian at given point, x
---
>       Returns the log-density of this multivariate Gaussian at given point, xReturns the log-density of this multivariate Gaussian at given point, x Since1.3.0
> 
347c348,349
<       Returns density of this multivariate Gaussian at given point, x
---
>       Returns density of this multivariate Gaussian at given point, xReturns density of this multivariate Gaussian at given point, x Since1.3.0
> 
366d367
<       



1.4.2/org/apache/spark/mllib/stat/KernelDensity.html.raw:
26a27
>         Since1.4.0
224c225,226
<       Estimates probability density function at the given array of points.
---
>       Estimates probability density function at the given array of points.Estimates probability density function at the given array of points. Since1.4.0
> 
334c336,337
<       Sets the bandwidth (standard deviation) of the Gaussian kernel (default: 1.0).
---
>       Sets the bandwidth (standard deviation) of the Gaussian kernel (default: 1.0).Sets the bandwidth (standard deviation) of the Gaussian kernel (default: 1.0). Since1.4.0
> 
347c350,351
<       Sets the sample to use for density estimation (for Java users).
---
>       Sets the sample to use for density estimation (for Java users).Sets the sample to use for density estimation (for Java users). Since1.4.0
> 
360c364,365
<       Sets the sample to use for density estimation.
---
>       Sets the sample to use for density estimation.Sets the sample to use for density estimation. Since1.4.0
> 



1.4.2/org/apache/spark/mllib/stat/MultivariateOnlineSummarizer.html.raw:
25,26c25
< to have time complexity O(nnz) instead of O(n) for each column.
<  Annotations
---
> to have time complexity O(nnz) instead of O(n) for each column. Annotations
28a28
>         Since1.1.0
169c169
< sampleThe sample in dense/sparse vector format to be added into this summarizer.returnsThis MultivariateOnlineSummarizer object.
---
> sampleThe sample in dense/sparse vector format to be added into this summarizer.returnsThis MultivariateOnlineSummarizer object. Since1.1.0
215,216c215,216
<       Sample size.Sample size.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 
313,314c313,314
<       Maximum value of each column.Maximum value of each column.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 
327,328c327,328
<       Sample mean vector.Sample mean vector.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 
343c343
< otherThe other MultivariateOnlineSummarizer to be merged.returnsThis MultivariateOnlineSummarizer object.
---
> otherThe other MultivariateOnlineSummarizer to be merged.returnsThis MultivariateOnlineSummarizer object. Since1.1.0
357,358c357,358
<       Minimum value of each column.Minimum value of each column.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 
384,386c384,385
<       L1 norm of each column
< L1 norm of each column
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.2.0
> 
399,401c398,399
<       Euclidean magnitude of each column
< Euclidean magnitude of each column
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.2.0
> 
440,441c438,439
<       Number of nonzero elements (including explicitly presented zero values) in each column.Number of nonzero elements (including explicitly presented zero values) in each column.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 
480,481c478,479
<       Sample variance vector.Sample variance vector. Should return a zero vector if the sample size is 1.
<  Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummary
---
>        Definition ClassesMultivariateOnlineSummarizer → MultivariateStatisticalSummarySince1.1.0
> 



1.4.2/org/apache/spark/mllib/stat/MultivariateStatisticalSummary.html.raw:
18c18
<           Trait for multivariate statistical summary of a data matrix.
---
>           Trait for multivariate statistical summary of a data matrix. Since1.0.0
78c78,79
<       Sample size.
---
>       Sample size.Sample size. Since1.0.0
> 
91c92,93
<       Maximum value of each column.
---
>       Maximum value of each column.Maximum value of each column. Since1.0.0
> 
104c106,107
<       Sample mean vector.
---
>       Sample mean vector.Sample mean vector. Since1.0.0
> 
117c120,121
<       Minimum value of each column.
---
>       Minimum value of each column.Minimum value of each column. Since1.0.0
> 
130c134
<       L1 norm of each column
---
>       L1 norm of each columnL1 norm of each column Since1.2.0
144c148
<       Euclidean magnitude of each column
---
>       Euclidean magnitude of each columnEuclidean magnitude of each column Since1.2.0
158c162,163
<       Number of nonzero elements (including explicitly presented zero values) in each column.
---
>       Number of nonzero elements (including explicitly presented zero values) in each column.Number of nonzero elements (including explicitly presented zero values) in each column. Since1.0.0
> 
171c176
<       Sample variance vector.Sample variance vector. Should return a zero vector if the sample size is 1.
---
>       Sample variance vector.Sample variance vector. Should return a zero vector if the sample size is 1. Since1.0.0



1.4.2/org/apache/spark/mllib/stat/Statistics$.html.raw:
19,20c19
< API for statistical functions in MLlib.
<  Annotations
---
> API for statistical functions in MLlib. Annotations
22a22
>         Since1.1.0
164c164
<         The order of the elements in the returned array reflects the order of input features.
---
>         The order of the elements in the returned array reflects the order of input features. Since1.1.0
182c182
<         the method used, and the null hypothesis.
---
>         the method used, and the null hypothesis. Since1.1.0
200c200
<         the method used, and the null hypothesis.
---
>         the method used, and the null hypothesis. Since1.1.0
221c221
<         the method used, and the null hypothesis.
---
>         the method used, and the null hypothesis. Since1.1.0
255c255
< Xan RDD[Vector] for which column-wise summary statistics are to be computed.returnsMultivariateStatisticalSummary object containing column-wise summary statistics.
---
> Xan RDD[Vector] for which column-wise summary statistics are to be computed.returnsMultivariateStatisticalSummary object containing column-wise summary statistics. Since1.1.0
269c269,270
<       Java-friendly version of corr()
---
>       Java-friendly version of corr()Java-friendly version of corr() Since1.4.1
> 
287c288
<         specified method.
---
>         specified method. Since1.1.0
301c302,303
<       Java-friendly version of corr()
---
>       Java-friendly version of corr()Java-friendly version of corr() Since1.4.1
> 
317c319
< xRDD[Double] of the same cardinality as y.yRDD[Double] of the same cardinality as x.returnsA Double containing the Pearson correlation between the two input RDD[Double]s
---
> xRDD[Double] of the same cardinality as y.yRDD[Double] of the same cardinality as x.returnsA Double containing the Pearson correlation between the two input RDD[Double]s Since1.1.0
337c339
<               Supported: pearson (default), spearmanreturnsCorrelation matrix comparing columns in X.
---
>               Supported: pearson (default), spearmanreturnsCorrelation matrix comparing columns in X. Since1.1.0
353c355
< Xan RDD[Vector] for which the correlation matrix is to be computed.returnsPearson correlation matrix comparing columns in X.
---
> Xan RDD[Vector] for which the correlation matrix is to be computed.returnsPearson correlation matrix comparing columns in X. Since1.1.0
443a446,488
>         
>         def
>       
>       
>         kolmogorovSmirnovTest(data: RDD[Double], distName: String, params: Double*): KolmogorovSmirnovTestResult
>       
>       
>       Convenience function to conduct a one-sample, two-sided Kolmogorov-Smirnov test for probability
> distribution equality.Convenience function to conduct a one-sample, two-sided Kolmogorov-Smirnov test for probability
> distribution equality. Currently supports the normal distribution, taking as parameters
> the mean and standard deviation.
> (distName = "norm")dataan RDD[Double] containing the sample of data to testdistNamea String name for a theoretical distributionparamsDouble* specifying the parameters to be used for the theoretical distributionreturnsorg.apache.spark.mllib.stat.test.KolmogorovSmirnovTestResult object containing test
>        statistic, p-value, and null hypothesis.
>  Annotations
>                 @varargs()
>               
>         
>     
>       
>       
>       
>       
>         
>         def
>       
>       
>         kolmogorovSmirnovTest(data: RDD[Double], cdf: (Double) ⇒ Double): KolmogorovSmirnovTestResult
>       
>       
>       Conduct the two-sided Kolmogorov-Smirnov (KS) test for data sampled from a
> continuous distribution.Conduct the two-sided Kolmogorov-Smirnov (KS) test for data sampled from a
> continuous distribution. By comparing the largest difference between the empirical cumulative
> distribution of the sample data and the theoretical distribution we can provide a test for the
> the null hypothesis that the sample data comes from that theoretical distribution.
> For more information on KS Test:dataan RDD[Double] containing the sample of data to testcdfa Double => Double function to calculate the theoretical CDF at a given valuereturnsorg.apache.spark.mllib.stat.test.KolmogorovSmirnovTestResult object containing test
>        statistic, p-value, and null hypothesis.
>  See alsohttps://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test
> 
>     
>       
>       
>       
>       



1.4.2/org/apache/spark/mllib/stat/test/package.html.raw:
56a57,70
>         class
>       
>       
>         KolmogorovSmirnovTestResult extends TestResult[Int]
>       
>       
>       :: Experimental ::
> Object containing the test results for the Kolmogorov-Smirnov test.
>     
>       
>       
>       
>       
>         



1.4.2/org/apache/spark/mllib/stat/test/TestResult.html.raw:
28c28
<           ChiSqTestResult
---
>           ChiSqTestResult, KolmogorovSmirnovTestResult



1.4.2/org/apache/spark/mllib/tree/configuration/BoostingStrategy.html.raw:
25c25,26
<                      then stop. Ignored when run is used.
---
>                      then stop.  Ignored when
>                      org.apache.spark.mllib.tree.GradientBoostedTrees.run() is used.
86c87,88
<                      then stop. Ignored when run is used.
---
>                      then stop.  Ignored when
>                      org.apache.spark.mllib.tree.GradientBoostedTrees.run() is used.
503c505,506
<                      then stop. Ignored when run is used.
---
>                      then stop.  Ignored when
>                      org.apache.spark.mllib.tree.GradientBoostedTrees.run() is used.



1.4.2/org/apache/spark/mllib/tree/configuration/Strategy$.html.raw:
173c173
<         defaultStategy(algo: Algo): Strategy
---
>         defaultStrategy(algo: Algo): Strategy
403a404,422
>               Deprecated Value Members
>               
>       
>       
>       
>       
>         
>         def
>       
>       
>         defaultStategy(algo: Algo): Strategy
>       
>       
>        Annotations
>                 @deprecated
>               
>         Deprecated(Since version 1.5.0) Use Strategy.defaultStrategy instead.
>     
>             



1.4.2/org/apache/spark/mllib/util/Loader.html.raw:
28c28
<           DecisionTreeModel, GaussianMixtureModel, GradientBoostedTreesModel, IsotonicRegressionModel, KMeansModel, LassoModel, LinearRegressionModel, LogisticRegressionModel, MatrixFactorizationModel, NaiveBayesModel, PowerIterationClusteringModel, RandomForestModel, RidgeRegressionModel, SVMModel, Word2VecModel
---
>           DecisionTreeModel, DistributedLDAModel, GaussianMixtureModel, GradientBoostedTreesModel, IsotonicRegressionModel, KMeansModel, LassoModel, LinearRegressionModel, LocalLDAModel, LogisticRegressionModel, MatrixFactorizationModel, NaiveBayesModel, PowerIterationClusteringModel, RandomForestModel, RidgeRegressionModel, SVMModel, Word2VecModel



1.4.2/org/apache/spark/mllib/util/Saveable.html.raw:
28c28
<           DecisionTreeModel, GaussianMixtureModel, GradientBoostedTreesModel, IsotonicRegressionModel, KMeansModel, LassoModel, LinearRegressionModel, LogisticRegressionModel, MatrixFactorizationModel, NaiveBayesModel, PowerIterationClusteringModel, RandomForestModel, RidgeRegressionModel, SVMModel, StreamingKMeansModel, Word2VecModel
---
>           DecisionTreeModel, DistributedLDAModel, GaussianMixtureModel, GradientBoostedTreesModel, IsotonicRegressionModel, KMeansModel, LDAModel, LassoModel, LinearRegressionModel, LocalLDAModel, LogisticRegressionModel, MatrixFactorizationModel, NaiveBayesModel, PowerIterationClusteringModel, RandomForestModel, RidgeRegressionModel, SVMModel, StreamingKMeansModel, Word2VecModel


